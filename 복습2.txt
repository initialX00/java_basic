Wrapper 자료형

박싱
Integer a = new Integer(10);
Integer a = 10;
언박싱
int b = a;





제네릭타입 <>
일반자료형은 불가하다, 참조형자료로써 클래스타입으로 취급된다.
T,R,C는 추상화된 제너릭타입을 말한다.
클래스타입이기에 사용하기위해선 클래스명 뒤에 기입한다.


	ForEachPrinter2<Integer> ifp = new ForEachPrinter2<>();  //객체의 자료형은 앞에서 유추가능하여 생략
	new ForEachPrinter2<>();  //자료형이 유추가 불가능할 경우 Object로 취급된다.
Object클래스도 제너릭타입처럼 데이터타입에 유연성을 가지지만 Object를 쓸경우 업캐스팅, 다운캐스팅이 필수다.


static 메서드는 객체를 생성하지 않기에 제너릭타입을 리턴자료형(반환타입) 앞에 표기한다.
	    public static <T> void print(T[] array) {
	        for (T data : array) {
	            System.out.print(data);
	        }
	    }


List.of :: 추가,삭제,수정이 불가, 상수선언, 읽기전용
	List<Integer> list = List.of(1,2,3,4,5);






stream타입은 다시 사용이 불가하기에 값을 불러올 수 없다.

.stream()  //리스트타입 등을 순회하여 스트림타입으로 변환

.map(함수)  //값을 받고 값을 내준다.(메서드와 같은역할)
.filter(조건)  //값을 걸러낸다.

.collect();  //새 스트림으로 값을 담는다
.collect(Collectors.toList());  //모은값을 리스트로 변환
forEach()  //각 요소를 처리
.forEach(System.out::println);  //각 요소 출력
.forEach(name -> System.out.println(name)); 





람다식 복습 때 생략은 무시하고 기본형 중심으로 익히기

익명클래스는 한번만 사용하는 존재로, 내부클래스로서 이름없이 구현한다.
>> 추상클래스(인터페이스)명 객체명 = new 추상클래스(인터페이스)명 { 익명클래스의 몸체 };
추상메서드를 구현할 경우 구현화해줘야한다.

람다식은 추상메서드가 하나여야한다. 추상메서드가 둘 이상이면 안 된다.
익명클래스의 괄호{}를 메서드의 몸체로서 사용한다.
>> 인터페이스명 객체명 = ( 변수 선언 ) -> { 메서드 몸체 };
리턴이 있을경우 return해준다.
변수선언 시 데이터타입은 생략이 가능하다, 오버라이딩이기때문에 변수명도 임의로 가능하다.

@FunctionalInterface //함수형 인터페이스 - 람다전용, 추상메서드 2개 이상 불가




.stream().map()
= public Stream<T> map( Fuction<T> 변수명) { 메서드 몸체 };
steram - 인터페이스
<>람다 - 인터페이스 데이터타입
map( 괄호 안 ) - 인터페이스



