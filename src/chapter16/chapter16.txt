=== Wrapper클래스 ===
 : 기본 데이터 타입을 객체를 다루기 위해 사용되는 클래스
 - 기본 데이터 타입 : byte,short, int, long, float, double, boolean, char, void
   각 데이터 타입에 해당하는 Wrapper 클래스가 존재한다.
 - java.lang 패키지에 정의
 - 사용 용도 예시) 컬렉션 프레임워크에서는 객체만 저장 가능하다.
   기본 데이터 형태를 저장하려면 Wrapper 클래스로 변환하여 저장한다.
 - 참조 데이터 타입 : Byte, Short, Integer, Long, Float, Double, Boolean, Character, Void



1. 박싱(Boxing) & 언박싱(Unboxing)
 : 기본 타입과 해당 타입의 Wrapper 클래스 간의 자동 변환한다 (묵시적 변환)
 - 자바 컴파일러에 의해 자동으로 처리된다
  1) 박싱(Boxing)
    : 기본 데이터 타입의 값을 해당하는 Wrapper 클래스의 객체로 변환하는 과정을 말한다.
    - int 데이터 타입의 값을 Integer 객체로 변환하는것을 의미한다
  2) 언박싱(Unboxing)
    : Wrapper 클래스의 객체를 해당하는 기본 데이터 타입으로 변환하는 과정을 말한다.
    - Integer 객체의 값을 int 데이터 타입으로 변환하는것을 의미한다
  3)박싱과 언박싱의 장단점
     장점 - 기본 타입과 객체 타입 간의 변환을 자동으로 처리하고, 코드 작성이 용이하다
          - 컬렉션 프레임워크와 같이 객체만 요구하는 API와 호환성이 높다.
     단점 - 객체를 생성하는 과정에서 추가적인 메모리 사용량이 증가되어 박싱, 언박싱 과정에서 성능 저하가 발생할 수 있다.
          - null 값이 할당될 수 있는 Wrapper 객체를 언박싱할 경우
            NullPointerException 발생 위험이 있다.

  cf) Wrapper 클래스의 sout 출력
    - System.out.println() 함수를 사용하여 Wrapper 클래스의 객체 호출 시
      해당 객체의 toString() 메서드가 자동으로 호출되어 객체가 보유하고 있느 실제 값이 출력된다.





2. Integer 클래스
 : int값을 내부에 저장, 관련 유용한 메서드를 제공한다.

  1)생성자
    Integer(int value) - 주어진 int 값을 갖는 Integer 객체를 생성한다.
    Integer(String s) - 문자열을 받아 해당하는 int 값을 갖는 Integer 객체를 생성한다.
                        문자열이 정수로 변환될 수 없는 경우 NumberFormatException이 발생한다.
  2)주요 메서드
    intValue() : Integer 객체를 기본 int 타입으로 변환한다.
    parseInt(String s) : 문자열을 기본 int 타입으로 파싱한다.
    valueOf(int i) : int 값을 가진 Integer 객체를 반환한다.
    compareTo(Integer anotherInteger) : 두 Integer 객체를 비교하여 같으면 0,
                                          호출 객체가 더 크면 양수, 호출 객체가 더 작으면 음수를 반환한다.


	public class A_Wrapper {
	    public static void main(String[] args) {
	
	        //1)Boxing
	        int i = 5;
	        Integer integerObject = i; //자동 박싱 : 기본 타입의 값을 Integer 객체로 변환
	        System.out.println(integerObject); //5 - toString메서드에 의한 자동 출력

	        //2)Unboxing
	        Integer integer = new Integer(10);
	        int num = integer; //자동 언박싱 : Integer 객체를 기본 데이터 타입으로 변환
	        System.out.println(num); //10

	        //Integer 클래스
	        //1)생성자
	        new Integer(50);
	        new Integer("123");
	        //new Integer("안녕하세요"); //문자열이 정수로 변환될 수 없는 경우 NumberFormatException이 발생한다.
	
	        //2)주요 메서드
	        //intValue() : Integer 객체를 기본 int 타입으로 변환한다.
	        Integer myInteger = new Integer(100);
	        int myInt = myInteger.intValue();
	        System.out.println(myInt); //100
	        //parseInt(String s) : 문자열을 기본 int 타입으로 파싱한다.
	        String numberStr = "250";
	        int parsedInt = Integer.parseInt(numberStr);
	        System.out.println(parsedInt); //250
	        //valueOf(int i) : int 값을 가진 Integer 객체를 반환한다.
	        Integer anotherInteger = Integer.valueOf(500);
	        System.out.println(anotherInteger); //500
	        //compareTo(Integer anotherInteger) : 두 Integer 객체를 비교하여 같으면 0,
	        //                                    호출 객체가 더 크면 양수, 호출 객체가 더 작으면 음수를 반환한다.
	        int result = myInteger.compareTo(anotherInteger);
	        System.out.println(result); // -1  : 호출 객체(myInteger가 더 작음)

	    }
	}








=== ENUM (열거형) ===
 : 서로 관련된 상수들의 집합을 표현하는데 사용하는 자료형이다.
   서로 유기적인 관계성을 띄며, 자바의 클래스처럼 취급할 수 있다.
 - 일반적으로 상수 선언에 사용되는 static final보다 더 간결하고 안전한 방식으로 정의할 수 있다.
 - 특정 값들만 가질 수 있도록 제한하는데 사용할 수 있다.

1.Enum의 기본 사용법
  >> enum Enum명 {}
  - Enum의 명명은 대문자로 시작하여 UpperCamelCase를 사용한다
  중괄호 내에 열거할 데이터를 쉽표(,)로 구분하여 나열한다
  - enum 내의 데이터는 final 특징을 살려 UPPER_SNAKE_CASE를 따른다
    클래스의 statci final 필드처럼 쓰인다, 각 상수는 정의된 Enum 타입으로 간주된다.

  cf) class 사용법
	>> class Clss명 {}


2.Enum의 주요 메서드
  values() : 열거형의 모든 값을 배열로 반환한다.
  name() : Enum 상수의 이름을 문자열로 반환한다.
  ordinal() : Enum 상수의 순서를 반환(0부터 시작)
  valueOf(String name) : 문자열로 Enum 상수를 반환한다
                              잘못된 문자열 전달 시 IllegalArgumentException 발생


	//1.Enum 선언
	enum Fruits {
	    APPLE, BANANA, ORANGE //enum 내의 데이터는 final 특징을 살려 UPPER_SNAKE_CASE를 따른다
	}

	enum CoffeeSize {
	    SMALL(200), MEDIUM(300), LARGE(400); //생성자 호출

	    private final int ml;

	    CoffeeSize(int ml) { //생성자
	        this.ml = ml;
	    }

	    public int getMl() {return ml;}
	}


	public class B_ENUM {
	    public static void main(String[] args) {
	        //1. Enum 호출
	        //클래스의 statci final 필드처럼 쓰인다
	        //각 상수는 정의된 Enum 타입으로 간주된다.
	        Fruits apple = Fruits.APPLE;
	        System.out.println(apple);


	        //2. Enum의 주요메서드
	        //vlaues()
	        System.out.println(Fruits.values()); //[Lchapter16.Fruits;@73a28541

	        //name()
	        System.out.println(Fruits.APPLE.name()); //APPLE

	        //Enum 순환
	        for(Fruits fuits : Fruits.values()){
	            System.out.println(fuits); //APPLE  BANANA  ORANGE
	        }

	        //valueOf(String name)
	        //Fruits orangeFruit = Fruits.valueOf("Orange"); - IllegalArgumentException 발생
	        Fruits orangeFruits = Fruits.valueOf("ORANGE");

	        //ordinal()
	        System.out.println(orangeFruits.ordinal());  //2


	        //1.Enum 생성자 호출
	        CoffeeSize size = CoffeeSize.MEDIUM;
	        System.out.println("Selected size : " + size + ", Volume : " + size.getMl() + "ml");
	        //Selected size : MEDIUM, Volume : 300ml

	    }
	}





3.ENUM의 특징
  1)ENUM 메서드 오버라이딩
     : ENUM은 상수별로 다른 동작을 정의할 수 있다
     - abstraact 메서드를 선언하고 상수별로 구현이 가능하다

  2)ENUM의 특징
     - 타입 안정성을 제공한다. 상수에 허용되지 않은 값을 지정되는걸 방지한다.
     - 가독성을 향상시킨다. 상수의 집합을 하나의 열거형으로 표현한다.

  3)ENUM의 제한
     - 값의 집합이 고정된 경우에만 사용해야한다.
     - Enum은 상속 지원은 불가하지만, 인터페이스 구현은 가능하다

     cf)Enum과 데이터베이스
     : 어노테이션을 활용한 매핑이 가능하다


	enum Operation {
	    ADD {
	        public int apply(int x, int y){
	            return x + y;
	        }
	    },
	    SUBTRACT {
	        public int apply(int x, int y){
	            return x - y;
	        }
	    };
	    public abstract int apply(int x, int y); //Operation의 상수가 반드시 가져야할 추상 메서드
	}

	enum Season {
	    SPRING("봄"),
	    SUMMER("여름"),
	    AUTUMN("가을"),
	    WINTER("겨울");

	    private final String seasonName;

	    Season(String seasonName) {
	        this.seasonName = seasonName;
	    }
	    public String getSeasonName() {
	        return seasonName;
	    }
	}


	public class C_ENUM {
	    public static void main(String[] args) {
	        System.out.println(Operation.ADD.apply(5,3)); //8
	        System.out.println(Operation.SUBTRACT.apply(5,3)); //2

	        Season season = Season.WINTER;

	        switch(season){
	            case SPRING:
	                System.out.println("봄봄 봄이 왔어요");
	                break;
	            case SUMMER:
	                System.out.println("여름 여름 여름이다");
	                break;
	            case AUTUMN:
	                System.out.println("나 가능 타나봐요");
	                break;
	            case WINTER:
	                System.out.println("메리크리스마스"); //메리크리스마스
	                break;
	        }

	    }
	}









=== Thread (스레드) ===
 : 동시에 여러 작업을 수행할 수 있도록 도와주는 기능을 말한다.
 - 프로그램 내에서 실행되는 작업 흐름의 단위이다.
 - 하나의 프로그램에서 여러 스레드를 사용하면 여러 작업을 동시에 처리한다.
        ex) 식당 시스템 - 손님들 : 사용자들 - 요리사들 : 스레드들 - 식당 : 프로그램

  cf) 스레드 사용 목적
    - 여러 작업을 동시에 처리 : 프로그램의 효율을 증가시킨다
    ex) 문서 편집 프로그램에서 문서 저장 & 문서 편집 & 문서 조회를 동시 진행

1.자바 스레드 생성 바법
  1) Thread 클래스를 상속받아 만들기
     : MyThread 객체를 생성하고, start() 메서드를 호출하여 스레드를 실행한다.
  2) Runnable 인터페이스를 구현해서 만들기
     : MyRunnable 객체를 Thread의 객체 생성자에게 전달, start() 메서드로 호출한다.


	class MyThread extends Thread {
	    // Thread 클래스를 상속 받아 run 메서드를 재 정의한다
	    @Override
	    public void run() {
	        System.out.println("스레드가 일을 시작합니다");
	    }
	}

	class MyRunnable implements Runnable{
	    //Runnable 인터페이스를 구현받아 run 추상 메서드를 재정의
	    public void run() {
	        System.out.println("인터페이스 스레드가 일을 시작합니다");
	    }
	}

	public class D_Thread {
	    public static void main(String[] args) {
	        //자바스레드 생성방법
	        //1)Thread 클래스 상속받아 만들기
	        MyThread myThread = new MyThread();
	        myThread.start(); //

	        //2)Runnable 인터페이스를 구현해서 만들기
	        MyRunnable myRunnable = new MyRunnable();
	        Thread thread = new Thread(myRunnable);
	        thread.start();
	    }
	}







=== DTO, VO, DAO, Entity ===
 : 데이터를 목적에 따라 정의하는 구조

 - DTO (Data Transfer Object) : 데이터를 전달하기 위한 객체
   VO (Value Object) : 값 자체를 표현하는 객체
   DAO (Data Access Object) : Database에 접근하는 역할을 하는 객체
   Entity : 실제 DB 테이블과 매핑되는 클래스


1. DTO
  : 계층 간 데이터 교환을 위해 사용하는 객체
  - 로직을 가지지 않은 순수한 데이터 객체(Getter & Setter만 가진 클래스)
  - 주로 데이터베이스에서 데이터를 가져오거나 REST API 통신에서 요청 및 응답 데이터를 담아 전달할 때 사용한다.

2. VO(Value Object)
  : 값을 표현하는 객체
  - 데이터를 담는 용도로 사용된다, 불변성을 가진다(한번 생성되면 내용 변경이 불가하다)
  - 주로 필드값을 final 설정하게 된다. 따라서 Getter만을 가진다.

3. DAO(Data Access Object)
  : 데이터베이스 또는 저장 매체의 데이터에 접근하는 객체
  - 서비스 모델과 데이터베이스를 연결하는 역할
  - 데이터의 CRUD 작업을 시행하는 클래스
  - 비즈니스 로직에서 데이터베이스의 직접적인 조작없이 데이터를 다룰 수 있게 한다.

4. Entity (실제)
  : 데이터베이스의 테이블에 해당하는 데이터의 구조와 거의 일치하는 클래스이다
  - JPA(Java Persistence API)와 같은 ORM(Object-Related Mapping) 틀에서 사용한다
  - 데이터베이스의 테이블의 레코드와 매핑, 데이터와 관련된 비즈니스 로직을 포함한다.


	import lombok.AllArgsConstructor;
	import lombok.Getter;


	//1.DTO : 사용자의 아이디와 비밀번호만을 가진 로그인 요청 정보를 가진 DTO
	class UserSignInRequestDto {
	    private String userId;
	    private String password;
	}

	//2.VO : 읽기 전용의 데이터
	@AllArgsConstructor
	@Getter
	class Address {
	    private final String city;
	    private final String zipCode;
	}

	//3.DAO : 사용자의 id에 일치하는 데이터를 응답 - 사용자 로그인 후 아이디 및 닉네임 등을 포함하여 응답
	@AllArgsConstructor
	class UserSignInResponseDto {
	    //Sign In : 로그인  == Sing Up : 회원가입 == Sign Out : 로그아웃
	    private String userId;
	    private String nickname;
	}
	// 사용자 데이터베이스와 연관된 작업을 모두 명시
	class UserDao {
	    //로그인 한 사용자 데이터 단건 조회
	    public UserSignInResponseDto getUserById(String userId){
	        //데이터베이스에서 userId에 해당하는 사용자 정보를 조회
	        String id = "aaa";
	        String nickname = "고고고";
	        return new UserSignInResponseDto(id, nickname);
	    }
	}

	//4.Entity
	class User {
	    private Long id;
	    private String userId;
	    private String password;
	    private String name;
	    private String email;
	    private String nickname;
	}


	public class E_Thread {
	    public static void main(String[] args) {
	        //단일 스레드는 순서대로 작업한다
	//        for(int i = 0; i < 10; i++) {
	//            System.out.println("첫번쨰 for문 : " + i);
	//        }
	//        for(int i = 0; i < 10; i++) {
	//            System.out.println("두번쨰 for문 : " + i);
	//        }

	        //스레드는 동시적으로 작업한다.
	        Thread thread1 = new Thread(() -> {
	            for(int i = 0; i < 5; i++){
	                System.out.println("스레드1 : " + i);
	                try{
	                    Thread.sleep(1000); //1초동안 스레드를 일시정지
	                } catch(InterruptedException e){ //슬립은 InterruptedException와 같이써야한다
	                    e.printStackTrace();
	                }
	            }
	        });
	        thread1.start();
	
	        Thread thread2 = new Thread(() -> {
	            for(int i = 0; i < 5; i++){
	                System.out.println("스레드2: " + i);
	                try{
	                    Thread.sleep(1000);
	                } catch(InterruptedException e) {
	                    e.printStackTrace();
	                }
	            }
	        });
	        thread2.start();
	    }
	}











