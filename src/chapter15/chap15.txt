        //findFirst() 메서드
        //: Stream에서 조건에 맞는 첫번째 요소를 반환하기 위해 사용한다
        //- id가 해당 객체의 고유값이라면, 더 정확하게 해당 객체를 가져오는 방법이다
        //- Optional 타입의 객체를 반환한다

        //removeIf() : ArrayList의 메서드로 인자에 전달된 조건으로 리스트의 아이템을 삭제한다.
        //조건에 부합하는것을 삭제, 그렇지 않은 것은 리스트에 남는다.








=== 자바에서 배열과 리스트의 정렬 ===
1.배열(Arrays 클래스) 정렬
  1)오름차순
    : Arrays클래스에서 제공하는 정적 메서드 사용
    >> Arrays.sort()
    - 오름차순 정렬만 지원한다. int값 반환
  2)내림차순
    : Comparator 클래스 내의 reverseOrder() 정적 메서드를 사용한다.
    Collections.reverseOrder()는 Comparator<T>를 반환하는 메서드이다
    객체를 반환한다. 객체 간의 비교를 실시한다. 기본 데이터 타입에 대한 비교가 아니라 객체 타입에 대한 비교를 한다.

2.리스트(List 클래스) 정렬
    : Collections.sort() 또는 List 클래스의 sort() 메서드를 사용한다.


3.Comparator 클래스 사용 정렬===



4.람다식 사용



	import java.util.*;
	import java.util.stream.Collectors;

	public class A_sort {
	    public static void main(String[] args) {
	        //1. 배열 정렬	
	        //1) 오름차순 정렬
	        int[] numbers = {5,4,1,2,3};
	        Arrays.sort(numbers);
	        System.out.println(Arrays.toString(numbers)); //[1, 2, 3, 4, 5]

	        //2) 내림차순 정렬
	        //Comparator 클래스 내의 reverseOrder() 정적 메서드를 사용한다
	        Integer[] numbers2 = {8,2,1,5,3};
	        Arrays.sort(numbers2, Collections.reverseOrder());
	        System.out.println(Arrays.toString(numbers2)); //[8, 5, 3, 2, 1]

	        //2. 리스트 정렬
	        //1) 오름차순 >> Arrays.sort()
	        List<Integer> numbers3 = new ArrayList<>(List.of(5,9,3,4,1));
	        Collections.sort(numbers3);
	        System.out.println(numbers3); //[1, 3, 4, 5, 9]
	        //2) 내림차순
	        Collections.sort(numbers3, Collections.reverseOrder());
	        System.out.println(numbers3); //[9, 5, 4, 3, 1]


	        //===Comparator 클래스 사용 정렬===
	        List<String> names = new ArrayList<>(List.of("Tom","Jerry","Pororo", "Ruffy"));
	        //문자열 길이 기준 정렬
	        //순회)name -> name.length == String::length
	        names.sort(Comparator.comparingInt(String::length));
	        System.out.println(names); //[Tom, Jerry, Ruffy, Pororo]


	        //=== 람다식 사용 ==
	        List<String> names2 = new ArrayList<>(List.of("Pororo","Jerry","Tom", "Ruffy"));
	        names2.sort((a,b) -> b.length() - a.length()); //문자열 길이 내림차순으로 정렬
	        System.out.println(names2); //[Pororo, Jerry, Ruffy, Tom]
	        //.sort() 메서드
	        //: List 인터페이스의 메서드
	        //  리스트를 특정 기준에 따라 정렬한다
	        //  정렬 기준을 결정하는 Comparator(두 객체를 비교하여 정렬 순서를 결정)를 인수로 받는다
	        //  내림차순 >> (a,b) -> b.length() - a.length()
	        //    a와 b는 리스트의 두 요소를 나타낸다. 두 요소를 비교한 결과 값을 반환한다.
	        //    반환값이 양수면 b가 a보다 앞에 온다. 반환값이 0이면 순서 변경이 일어나지 않는다. 반환값이 음수면 a가 b보다 앞에 온다.
	        // 오름차순 >> (a,b) -> a.length() - b.length()



	        //==Comparator 클래스===
	        //: 사용자 정의 정렬 정의 시 유용한 인터페이스
	        //- 람다식 & 메서드 참조와 함께 사용
	        List<String> fruits = new ArrayList<>(List.of("banana","strawberry","mango","kiwi","apple"));

	        fruits.sort(Comparator.comparingInt(String::length)
	                //String클래스의 compareTo 메서드
	                //: 두 개의 문자열 값을 비교하여 int값으로 반환해주는 함수
	                .thenComparing(String::compareTo));
	        System.out.println(fruits); //[kiwi, apple, mango, banana, strawberry]
	    }
	}




=== 스트림 API ===
1.스트림 생성
  .stream() 메서드 사용

2.중간(가공) 절차
  map(Function)
  filter(Predication)
  sorted(Comparator)

3.최종(결과) 절차
  collect
  forEach





	        //==스트림 API 사용 정렬==
	        //: 정렬된 결과를 새로운 리스트로 받는다
	        //1)오름차순
	        List<Integer> listNumabers = new ArrayList<>(List.of(8,3,5,1,4));
	        List<Integer> sorted = listNumabers.stream()
	                .sorted()
	                .collect(Collectors.toList());
	        System.out.println(sorted); //[1, 3, 4, 5, 8]

	        //2)내림차순
	        List<Integer> reverseSorted = sorted.stream()
	                .sorted((a,b) -> b - a)
	                .collect(Collectors.toList());
	        System.out.println(reverseSorted); //[8, 5, 4, 3, 1]

	        //문자열 정렬
	        List<String> characterNames = new ArrayList<>(List.of("Pororo", "Jerry", "Tom", "Ruffy"));
	        List<String> sortedCharacter =  characterNames.stream()
	                .sorted((n1,n2) -> n1.length() - n2.length())
	                .collect(Collectors.toList());
	        System.out.println(sortedCharacter); //[Tom, Jerry, Ruffy, Pororo]







===스트림 API의 최종 연산===
1. collect 메서드
 : 스트림의 요소를 변환하거나 집계해서 최종 결과를 생성하는데 사용한다.
 - 스트림의 종결 작업 중 하나
 - 스트림에서 생성된 데이터를 특정한 컨테이너(List, Set, Map)로 변환하거나, 값을 합산, 집계에 사용한다
  >>  <R, A> R collect(Collector<? super T, A, R> collector);

  1)Collector
    : 스트림의 요소를 어떨게 수집할지 정의하는 객체
     - Collectors 유틸리티 클래스에서 다양한 정적 메서드를 제공한다
     R : 최종 결과 타입
     A : 중간 결과 컨테이너의 타입(내부적으로 사용)


2. collect 메서드와 함께 사용되는 Collectors 클래스
  : 다양한 Collector를 제공하여 collect 메서드와 결합해 하나의 결과를 반환한다
  : 유틸리티 클래스에서 다양한 정적 메서드를 제공

    정적 메서드
    - toList() : 스트림 데이터를 List로 변환할 때 사용
    - toSet()
    - toMap()
    - joining() : 문자열 요소를 연결
    - counting() : 스트림의 요소 수를 계산
    - groupingBy() : 요소를 그룹화
    - partitioningBy() : 스트림 요소를 조건에 따라 두 그룹으로 나눈다


	public class B_collect {
	    public static void main(String[] args) {
	        //Collectors.toList()
	        //:스트림 데이터를 List로 변환할 때 사용
	        List<String> languages = Arrays.asList("java", "paython", "javascript");
	        List<String> uppercaseLanguages = languages.stream()
	                //.map(languages -> languages.toUpperCase()) //문자열을 대문자로 변경 - 람다식
	                .map(String::toUpperCase) //문자열을 대문자로 변경 - 메서드 참조
	                .collect(Collectors.toList());
	        System.out.println(uppercaseLanguages);  //[JAVA, PAYTHON, JAVASCRIPT]

	        //Collectors.joining()
	        //: 문자열 요소를 결합하여 하나의 문자열로 반환
	        String result = uppercaseLanguages.stream()
	                .collect(Collectors.joining(", ", "[", "]")); //delimiter 구분자, prefix 접두사, suffix 접미사
	        System.out.println(result); //JAVAPAYTHONJAVASCRIPT

	        //Collectors.groupingBy()
	        //: 특정 기준에 따라 요소를 그룹화
	        Map<Character, List<String>> groupedByFirstChar = uppercaseLanguages.stream()
	                .collect(Collectors.groupingBy(language -> language.charAt(0)));
	        System.out.println(groupedByFirstChar); //{P=[PAYTHON], J=[JAVA, JAVASCRIPT]}

	        //Collectors.partitioningBy()
	        //: 조건에 따라 두 그룹으로 나뉜다
	        Map<Boolean, List<Integer>> partitioned = Stream.of(1,2,3,4,5)
	                .collect(Collectors.partitioningBy(num -> num % 2 == 0));
	        System.out.println(partitioned); //{false=[1, 3, 5], true=[2, 4]}
	    }
	}








=== Optional 클래스 ===
  : 값이 존재할 수도 있고 없을 수도 있는 객체를 감싸는 컨테이너, 자바 8에서 추가된 기능이다.
  - null값을 다룰 때 발생하는 NullPointerException(NPE) 문제를 줄이고, 명시적으로 값의 유무를 처리하도록 설계한다.

1. Optional 클래스
  : null이 아닌 값을 포함하거나, 값이 없는 상태를 나타낼 수 있다.
  - 값이 명시적으로 검사하고 처리하는 방식
  - 코드의 안정성과 가독성을 높인다.


2. Optional 생성방법
  1) .of() 메서드
     : null이 아닌 값을 감싸는 메서드
       null값을 전달하면 NullPointerException(NPE)을 발생시킨다
  2) .ofNullable() 메서드
     : null일 수도 있는 값을 감싸는 메서드
       null값이 들어오면 빈 Optional 객체를 반환한다.
  3) .empty() 메서드
     : 빈 Optional 객체를 생성한다


3. Optional 주요 메서드
  1) 값이 있는지 확인
       .isPresent() - 있으면 true, 없으면 false
       .isEmpty() - 있으면 false, 없으면 true
  2) 값 가져오기
       .get() - 값이 있을 경우 값 반환, 없을 경우 NoSuchElementException 발생
  3) 기본값 처리
       .orElse() - 값이 없으면 기본값 반환
       .orElseGet() - 값이 없으면 함수형 인터페이스로 값을 생성
       .orElseThrow() - 값이 없으면 예외를 발생
  4)스트림 활용리 가능하다
       : Optional 객체는 스트림으로 변환이 가능하다
  5)Optional 사용 시 주의점
      - 모든 곳에 Optional을 사용할 필요는 없다.
        반환 값에만 사용하는 것을 권장한다.
        필드 & 매개변수로 사용하는걸 권장하지 않는다.
      - 값이 반드시 있어야하는 경우는 Optional 사용을 하지 않는다.
        null 방지에 대한 필수 값은 직접 값을 반환하고 null 여부를 확인한다.


	import java.util.Optional;

	public class C_Optional {
	    public static void main(String[] args) {
	        //Optional 생성방법//
	        // .of() 메서드
	        Optional<String> optional1 = Optional.of("Hello Optional");
	        //Optional<String> optional2 = Optional.of(null);

	        // .ofNullable() 메서드
	        Optional<String> optional3 = Optional.ofNullable(null);

	        // .empty() 메서드
	        Optional<String> optional4 = Optional.empty();


	        //Optional 주요메서드//
	        //값확인 -  .isPresent()  .isEmpty()
	        System.out.println(optional1.isPresent());
	        System.out.println(optional1.isEmpty());
	        System.out.println(optional3.isPresent());
	        System.out.println(optional3.isEmpty());

	        //값가져오기 - .get()
	        System.out.println(optional1.get());
	        //System.out.println(optional3.get()); //값이 없어서 오류발생

	        //기본값 처리 - .orElse()  .orElseGet()  .orElseThrow()
	        System.out.println(optional3.orElse("기본값"));
	        System.out.println(optional3.orElseGet( () -> "발생시키는 값"));
	        try{
	            System.out.println(optional3.orElseThrow(() -> new Error("비워질 경우 사용자 정의 예외 발생")));
	        } catch (Error e) {
	            System.out.println("예외 발생");
	        }
	    }
	}


