수업 자바 버전 11


/// 자바의 파일 단위 ///
- 클래스 파일을 생성하여 코드 작성 : 파일명 UpperCamelCase 사용
  선생님커스터마이징 EX) A_Variable, B_DataType (수업 시간 순으로 정리, 원래는 언더바 사용 비권장)
- 파일의 확장자 : .java
- UpperCamelCase : 대문자로 시작, 단어와 단어의 연결은 대문자로 작성, 그 외는 소문자로 작성한다.

1. 자바 주석
 한줄 주석: 슬래시(/) 2개

 여러줄 주석:  /*
		슬래시(/) 2개 사이에 별(*) 2개
	      */

2. 자바 단축기(인텔리제이)//
 1)한 줄 주석 : Ctrl + /
 2)여러 줄 주석 : Ctrl + Shift + /
 3)복사붙여넣기 : Ctrl + c,v
 4)되돌리기,되감기 : Ctrl + z,y
 5)잘라내기 : Ctrl + x
 6)한 줄 복사 : Ctrl + alt + 방향키 (드래그 불필요)
 7)줄 이동 : Alt + 방향키
 8)실행 : Ctrl + f10
 9)자동완성 : ctrl + space
 10)System.out.println : sout으로 자동완성
 11)들여쓰기 : tap
     내어쓰기 : shift + tap





/// 변수(Variable) ///
: 데이터를 저장할 수 있는 메모리 '공간'을 의미한다.

1.변수 선언
 : 메모리 공간 생성 (그릇 생성)
 >> 데이터타입 변수명;
	int num; // 정수선언
	char chr; // 문자선언
	boolean bool; // 논리선언 (true, false)

2.변수 초기화(할당) (그릇에 데이터 넣기)
 : 처음 데이터를 넣는 과정: 초기화
   데이터를 바꾸는 과정: (재)할당
 >> 변수명 = 데이터값; (이퀄이 아닌 대입,우에서 좌)
	num = 10;
 	chr = '가';
 	bool = true;

3.변수 선언과 초기화는 동시에 가능하다
 >> 데이터타입 변수명 = 데이터값;
 	int number = 10;
	char character = '가';
 	boolean boolValue = false;

4.변수 명명 규칙
- 문자, 숫자, 기호를 사용
- 대문자를 구분한다, 길이제한이 없다 (Name과 name이 다르다)
- 숫자로 시작할 수 없다
- 기호는 _(언더스코어)와 $(달러)만 사용가능하다
- 자바의 예약어, 키워드는 변수명으로 사용이 불가하다
- lowerCamelCase를 권장한다(첫단어는 소문자, 다음부터 첫글자는 대문자)
  전체 대문자 사용하지 않는다(상수와의 구분)
- 변수는 재할당이 가능하지만, 재선언은 불가능하다.
	num24 = 48; //변수는 재할당이 가능하다
  	char num24 = '가'  //변수는 재선언이 불가능하다




/// 상수(Constant)   ///
: 프로그램 실행동안 그 값이 변경되지 않는 변수.
  선언과 동시에 반드시 초기화가 이루어져야한다.

1. 상수 선언방법
 : final 키워드를 사용하여 상수를 선언한다
 >> final 데이터타입 = 데이터값;
 	final double NUM = 3.14159;

2. 상수 명명 규칙
- UPPER_SNAKE_CASE 사용
- 모든 문자를 대문자 + 연결은 _(언더스코어)를 사용한다





/// 데이터 타입(자료형, Data Type) ///
: 자바는 '강'타입 언어
  모든 변수 선언 시 반드시 데이터 타입을 명시한다

1.데이터 타입의 종류
 -기본 타입
  변수선언 시 해당되는 자료형의 크기만큼 메모리가 할당된다
  실질적인 데이터가 저장된다
 -참조 타입
  객체의 참조(메모리 주소)를 저장하는 타입
  객체나 배열과 같이 메모리의 Heap영역에 저장된 데이터를 참조한다

 1)기본타입(자료형 - 8개)
    1bit는 메모리 한 칸
    1byte == 8bit
    byte(1), short(2), long(8), floot(4)
    int(4), double(8), char(2), boolean(1)

 1-1) 정수형
    byte(1바이트 정수): -128 ~ 127
    short(2바이트 정수): -32,768 ~ 32,767
    int(4바이트 정수): 약 -2.1억 ~ 약 2.1억 (가장 자주 쓰임)
    long(8바이트 정수): 약 -2의63제곱 ~ 약 2의 63제곱 (은행 등에 사용)
    long타입은 숫자 뒤에 알파벳(l.L)을 표기
 1-2) 문자형
    char(2바이트 문자 - 단일 문자 저장) : 홀따옴표('')로 표기
    	char grade = 'A';
    	char lastName = '이';
 1-3) 실수형(부동소수점 타입 - 소수점 자리가 있는 수)
    float (4바이트 실수)
    double (8바이트 실수)
    	float dollar1 = 32.123F; //데이터 값 뒤에 알파벳 f,F 표기
    	double dollar2 = 32.123;
 1-4) 논리형 (데이터 값으로 true, false만을 가진다)
    1바이트, 값 지정시 소문자 값를 권장
    변수명 지정 시 의문문을 사용한다
    	boolean isMarried = false;
    	boolean isActived = true;
   	boolean hasSnack = false;


 2)참조 자료형
   : 기본 자료형을 기초로 만들어진 자료형
     실제 데이터값은 없다, 데이터가 저장된 주소값을 가지는 자료형이다.

  2-1) 문자열
     String: 문자열을 저장하는데 사용한다
     쌍따옴표를 사용하여 문자열을 작성한다
     	String name = "이승아"; //주소값을 저장
     	System.out.println(name);
     	char charName = '이'; //직접적으로 변수명에 저장
     	System.out.println(charName);





/// 자바 형 변환 (Type Conversion) ///
: 하나의 타입을 다른 다입으로 바꾸는것

1.자료형의 크기에 따른 변환 규칙
  boolean(1)
  char(2)
  byte(1) < short(2) < int(4) < long(8) < float(4) < double(8)
  메모리 설계 상 정수 타입보다 실수 타입이 더 크다.

2-1. 자동 형 변환 (묵시적)
 크기가 큰 자료형으로 변환
 작은 범위의 타입을 큰 타입에 넣을 떄는 컴파일러가 자동으로 형 변환을 수행한다

 byte smallBox = 10; //1byte
 int bigBox = 10000; //4byte
 bigBox = smallBox;

2-2. 강제 형 변환 (명시적)
 크기가 작은 자료형으로 변환
 강제 형 변환 방법: (작은자료형타입) 큰데이터값;

 float fNumber = 1234.123F;
 int number = (int) fNumber;

3.char 자료형의 형 변환
 char 자료형은 음수 표현식이 없다
 char 자료형은 int 자료형보다 범주가 작다.

 	char a1 = 'a'; //a
 	char a2 = 97; //a
 	char a3 = '\u0061'; //a

	 char example = '가';
 	System.out.println((int)example); //44032
 	System.out.println((int)example + 1); //44033
 	System.out.println((char)((int)example + 1)); //각





///  자바 기본 입출력 IO(Input, Output) ///
입력: 콘솔창을 통해 개발자로부터 입력을 받는 것
출력: 콘솔창으로 데이터를 출력하는 것

1.출력
 sout으로 자동완성
 >> System.out.println(출력하고자하는 변수 또는 상수 또는 데이터 값);


2.입력
 자바 내장 Scanner 객체를 사용한다
 다양한 입력 소스로부터 데이터를 읽어올 수 있는 형태
 System.in(콘솔 창에서 표준 입력 스트림을 사용)
 import java.util.Scanner; //프로젝트 상단에 입력 Scanner + ctrl + space로 자동완성

 1)스캐너 생성
  Scanner(스캐너타입) 변수명 = new Scanner(System.in);
  Scanner sc = new Scanner(System.in);
 2)스캐너 실행
  스캐너명.next();  입력 내용을 문자열로 반환
  스캐너명.nextLine(); 엔터까지의 전체 라인을 문자열로 반환
  스캐너명.nextInt();
  스캐너명.next데이터타입();

  	System.out.println("나이를 입력해주세요 >> ");
  	int age = sc.nextInt();
  	sc.nextLine();  //버퍼에 남아있는 개행(Enter) 처리
  	System.out.println("이름을 입력해주세요 >> ");
  	String name = sc.nextLine();

 3)개행 문자(Enter) + 버퍼
    nextInt()나 nextDouble()의 경우
    버퍼에 개행 문자가 입력으로 처리되는 문제가 발생한다
    처리방법 : nextLine()의 입력 메서드 호출로 버퍼의 데이터를 사용한다
 4)스캐너 종료 방법
    스캐너 사용 후 메모리 체적화를 위해 스캐너 종료
    >> 스캐너명.close();
    	sc.close();



///  연산자(Operation)  ////
: 프로그램에서 데이터를 조작하거나 계산한다

1.산술 연산자
 더하기(+),빼기(-),곱하기(*),나누기(/),나머지(%)

2.증감 연산자
  1)후위 증감 연산자: 값이 계산된 후 변경된다.
    	int number = 10;
    	System.out.println(number++); //10
    	System.out.println(number--); //11
  2)전위 증감 연산자: 값이 먼저 변경되고 나서 계산에 적용된다.
    	System.out.println(++number); //11
    	System.out.println(--number); //10

3.대입(할당) 연산자
 : 좌항에 우항을 연산한 값으로 계산한다.
 +=, -=, *=, /=, %=

  A += B   //   A = A + B 
  A -= B   //   A = A - B
  A *= B   //   A = A * B
  A /= B   //   A = A / B
  A %= B   //   A = A % B

4.비교 연산자
 : 좌항을 우항과 비교한 결과를 논리(true,false) 값으로 반환
 <, >, <=, >=, ==(같다), !=(같지않다)
	System.out.println(5 > 3);  //true
  	System.out.println(5 == 3); //false

5.논리 연산자
 : 논리 값(boolean)값을 연산한다.
   cf) &(앰퍼샌드), |(vertical bar)
 1)&& : 논리곱(and)
   모든 값이 true면 true, 하나라도 false면 false
    	System.out.println(true && true);
    	System.out.println(true && true && false);
 2)|| : 논리합(or)
   하나라도 값이 true면 true. 모든 값이 false면 false
     	System.out.println(true || true);
     	System.out.println(true || true || false);
 3)! : 논리부정(not)
   값을 전환
    	boolean bool1 = true;
    	System.out.println(!bool1); // false


6.조건 연산자
 삼항 연산자
 >> 조건식 ? 조건식이 참인 경우 반환 값 : 조건식이 거짓인 경우 반환 값;
 (조건식은 결과 값이 논리 값으로 반환되는 식을 사용한다.)
   	int age = 17;
   	System.out.println(age > 19 ? "성인입니다" : "미성년자입니다");  // false


7.기타 연산자
 문자열 연결 연산자 + : 두 문자를 붙인다.
   	String result = "이"  + "승아";
 괄호 연산자 ( ) : 우선순위를 명시적으로 지정할 떄 사용
   	int num = (1 + 3) * 4;






