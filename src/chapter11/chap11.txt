=== OOP(Object - Oriented Programming) === (중요)
: 객체 지향 프로그래밍
- OOP의 4가지 특징 : 상속, 추상화, 다형성, 캡슐화



=== SOLID 원칙 === (중요)
: 객체 지향 프로그래밍의 5가지 소프트웨어 개발 원칙 (권장사항)
: SRP, OCP, LSP, ISP, DIP
- 소프트웨어 설계에서 유지보수성과 확장성을 높인다.
- 다양한 디자인 패턴(Design Pattern)이 SOLID 설계 원칙에 입각한다.

  cf)SQLID 원칙 적용 시 주의점
    - SOLID 원칙의 적용 순서는 따로 없다.
    - 다섯가지 모든 원칙이 필수가 아니다.
    - 서로 독립적인 개념이 아니라 서로 개념적으로 연관되어있다.

  SRP : 하나의 클래스에 하나의 기능만을 구현하기
  OCP : 추상클래스나 인터페이스를 통해 새로운 기능 추가가 자유롭다
  LSP : 추상클래스의 추상메서드를 통해 자식클래스가 어떠한 기능도 가능하게 하고 일관성을 챙긴다.
  ISO : 인터페이스 구현시 다중상속을 이용하여, 인터페이스에는 하나의 기능만을 선언한다.
       인터페이스 구현 시에는 해당 인터페이스의 추상화를 전부 구현해야하므로 사용하지 않는 것까지도 구현해야되는 경우가 생기기때문이다. 
  DIP : 클래스가 아니라 추상화에 의존하여 새로운 기능을 추가하더라도 코드 수정없이 확장이 가능하다.




1. 단일 책임 원칙 (SRP, Single Responsibility Principle)
 : 클래스는 단 하나의 책임을 가져야한다.
 : 한 가지의 역할(기능)만 가져야한다, 하나의 변화 이유만 가져야 한다.
 - 하나의 클래스가 가지는 하나의 역할과 관련된 변경사항만 클래스에 영향을 미쳐야 한다.
 - 하나의 코드를 변경할 때 여러개의 클래스를 수정하지 않고 하나의 클래스만 수정하도록하여 유지보수성을 높인다.

	/// SRP ///
	//잘못된 예시 - 서로 다른 객체(보고서,이메일)에 대한 메소드가 한 클래스에 작성됨
	class ReportManager { //보고서 담당업무
	    void generateReport() { //보고서 생성
	        System.out.println("보고서가 생성됨");
	    }
	    void send() { //이메일 전송
	        System.out.println("이메일이 전송됨");
	    }
	}
	//올바른 예시
	class ReportGenerator{
	    void generateReport() { //보고서 생성
	        System.out.println("보고서가 생성됨");
	    }
	}
	class EmailSender {
	    void send() { //이메일 전송
	        System.out.println("이메일이 전송됨");
	    }
	}





2.개방-폐쇄 원칙 (OPC, Open Closed Principle)
 : 소프트웨어 엔티티(클래스, 모듈, 함수 등)는 확장에는 열려있어야하고, 수정에는 닫혀있어야한다.
 - 기존 코드를 변경하지 않고 새로운 기능을 추가할 수 있어야한다.
 - 추상화를 통한 관계 구축을 권장한다. (추상클래스, 인터페이스)
 - 추상클래스와 인터페이스의 상속 및 구현을 통한 클래스 관계 구축한다.
   cf)확정에 열려있다 - 유연한 코드 추가가 가능하다
     변경에 닫혀있다 - 객체에 대한 직접적 수정을 제한한다

	/// OPC ///
	//잘못된 예시 - 수능할인기간이 끝나면 해당 코드를 다시 수정해야됨
	class Discount { //수능생들 할인
	    double calculateDiscount(boolean isStudent, int amount){
	        if(isStudent){
	            return amount * 0.2;
	        } else{
	            return amount * 0.1;
	        }
	    }
	}
	//올바른 예시 - 추상클래스, 인터페이스의 상속, 구현을 통한 클래스 관계 구축한다.
	interface DiscountPolicy {
	    double calculateDiscount(int amount);
	}
	class CommonDiscount implements DiscountPolicy {
	    public double calculateDiscount(int amount){
	        return amount * 0.1;
	    }
	}
	class StudentDiscount implements DiscountPolicy{
	    public double calculateDiscount(int amount){
	        return amount * 0.2;
	    }
	}




3.리스코프 치환 원칙 (LSP, Liskov Substitution Principle)
 : 상위 클래스의 객체를 하위 클래스의 객체로 치환하더라도 프로그램의동작이 일관되게 유지되어야 한다.
 - 자식 클래스는 부모 클래스의 기능을 완전하게 대체할 수 있다.
 - 업캐스팅 상태에서 부모의 메서드 사용 시 동작이 가능해야한다.

	/// LSP ///
	//잘못된 예시
	class Bird {
	    void fly() {
	        System.out.println("새는 날 수 있습니다");
	    }
	}
	class Penguin extends Bird {
	    @Override
	    //펭귄은 Bird를 상속받지만 fly 메서드가 가지는 동작을 의도대로 구현되지 않았다.
	    void fly () { 
	        System.out.println("펭귄은 날 수 없습니다");
	    }
	}
	//올바른 예시
	abstract class AbstractBird {
	    abstract void move();
	}
	class FlyingBird extends AbstractBird {
	    @Override
	    public void move() {
	        System.out.println("날 수 있는 새들입니다");
	    }
	}
	class Pororo extends AbstractBird {
	    @Override
	    public void move() {
	        System.out.println("펭귄은 수영할 수 있습니다");
	    }
	}




4. 인터페이스 분리 원칙 (ISP, Interface Segregation Principle)
: 하나의 큰 인터페이스보다 여러개의 작은 인터페이스를 사용하는것을 권장한다.
- 인터페이스의 단일 책임을 강조한다
- 클래스는 자신이 사용하지 않는 메서드에 의존하지 않아야 한다.
- SRP 인터페이스 버전 (상속 - 다중상속 불가, 인터페이스 - 다중구현 가능)
- 다중구현을 통해 필요한 메서드만 상속한다.

	/// ISP ///
	//잘못된 예시
	interface Worker {
	    void work();
	    void eat();
	}
	class Robot implements Worker {
	    @Override
	    public void work() {
	        System.out.println("로봇은 일을 할 수 있습니다");
	    }
	    public void eat() { //로봇은 먹는행위를 필요로하지 않지만 오류가 나지 않을려면 강제로 구현을 해야한다
	        System.out.println("로봇은 음식을 필요로하지 않습니다");
	    }
	}
	//올바른 예시
	interface Workable{
	    void work();
	}
	interface Eatable {
	    void eat();
	}
	class WorkRobot implements Workable {
	    @Override
	    public void work(){ //사용하지 않는 eat 메서드를 구현하지 않아도 된다
	        System.out.println("로봇은 일을 할 수 있습니다");
	    }
	}




5. 의존 역전 원칙 (DIP, Dependency Inversion Principle)
: 고수준 모듈은 저수준 모듈에 의존해서는 안 되며, 둘 다 추상화에 의존해야한다.
: 세부 구현이 아닌, 추상화된 인터페이스에 의존하도록 설계가 되어야한다.
- 의존역전 원칙은 각 클래스간의 결합도(coupling)을 낮춘다 (권장)

 cf) 고수준 모듈이란
       : 인터페이스나 추상클래스를 말하며, 기능을 제공하는 모듈을 말한다
     저수준 모듈이란
       : 메인클래스나 객체를 말하며, 기능을 구현하기 위한 각 개별요소이다.
 cf) 모듈이란
       : 소프트웨어를 각 기능별로 나눈 소스코드의 단위이다
     모듈화란
       : 하나의 큰 소프트웨어를 분리시키는 과정을 말한다.
   >> 좋은 소프트웨어일수록 모듈의 독립성이 높다고 평가한다.
   >> 모듈의 독립성을 결합도(Coupling)와 응집도(Cohesion)의 기준 단계로 측정한다

	/// DIP ///
	//잘못된 예시
	class Keyboard{
	}
	class Computer { //Computer가 Keyboard라는 구체적인 구현 클래스에 의존한다
	    private Keyboard keyboard;
	    public Computer(){
	        this.keyboard = keyboard;
	    }
	}
	//올바른 예시
	interface InputDevice{
	}
	class Mouse implements InputDevice{
	}
	class Speaker implements InputDevice{
	}
	//DipComputer는 InputDevice라는 추상화에 의존하여
	//새로운 입력 장치가 추가되더라도 코드 수정 없이 확장이 가능하다
	class DipComputer {
	    private InputDevice inputDevice;
	    public DipComputer(InputDevice inputDevice){
	        this.inputDevice = inputDevice;
	    }
	}






=== 결합도와 응집도 === (중요)

1. 결합도 (낮은 결합도가 목표)
 : 두개의 클래스나 모듈이 얼마나 강하게 연결되어 있는지를 나타낸다.
 : 모듈과 모듈 간의 의존정도를 말한다.
 - 낮은 결합도란 두 모듈이 서로 독립적으로 동작하여 한쪽 모듈이 수정되어도 다른 한쪽에 영향을 안 미친다
 - 낮은 결합도는 프로그램을 유지보수하기 쉽게 만들고 새로운 기능을 추가하거나 기존 코드를 수정할 때 오류 발생 가능성을 낮춘다.

2. 응집도 (높은 응집도가 목표)
 : 하나의 클래스나 모듈 안에서 관련된 작업들끼리 얼마나 잘 모여 있는지를 나타낸다.
 : 한 모듈 내의 구성요소들 간의 연관정도를 말한다.
 - 높은 응집도란 하나의 클래스가 관련된 일만 하고 해당 일이 잘 명시되있는것을 말한다. (많은 일, 관련 없는 일을 하지 않는다)
 - 높은 응집도는 프로그램에 대한 이해를 높이고, 유지보수를 용이하게 한다.

3. 결합도와 응집도의 관계
 : 낮은 결합도 + 높은 응집도
 - 각 클래스나 모듈이 독립적으로 동작하면서도 본인의 역할에 충실해야한다.
 - 유지보수가 쉽고 확장성이 좋다.

4. 낮은 결합도와 높은 응집도 구현
 : 클래스 간의 의존성을 줄이고, 변경에 강한 구조를 작성해야한다
  1)낮은 결합도
    1-1) 인터페이스와 다형성을 활용해야한다
     : 구현 클래스에 의존하지 않고, 인터페이스를 통해 서로 의존하게 구현한다 (DIP)
     - 구현이 변경되거나 확장되어도 인터페이스 규격에만 맞추면 동작한다.
    1-2) 의존성 주입 (Dependency Injection)
     : 클래스가 직접 객체를 생성하지 않고, 외부에서 객체를 주입받도록 설계한다.
     - 객체 간의 강한 결합을 줄이고 변경에 유연성이 생긴다
  2)높은 응집도
    2-1) 단일 책임 원칙 (SRP)
     : 클래스는 단 하나의 책임만 가져야 한다.
    2-2) 캡슐화
     : 필드를 private 설정하여, getter와 setter를 통해 접근한다.
     : 클래스의 내부 동작을 숨기고, 외부와의 상호작용을 최소화한다.

      복습)
      낮은 결합도 : 인터페이스와 다형성, 의존성 주입 등
      높은 응집도 : 단일 책임 원칙을 준수, 캡슐화, 모듈화(메서드 분리) 등


	/// 낮은 결합도 ///
	//인터페이스 정의
	interface Payment{
	    void processPayment();
	}
	//구현클래스
	class CreditCardPayment implements Payment {
	    @Override
	    public void processPayment(){
	        System.out.println("신용카드로 결제합니다");
	    }
	}

	class OrderClass {
	    //의존성 주입
	    //CreditCardPayment를 객체 생성하지 않고, Payment 추상객체를 사용한다
	    private Payment payment;
	    public OrderClass(Payment payment){
	        this.payment = payment;
	    }
	    void checkout() {
	        payment.processPayment();
	    }
	}
	
	/// 높은 응집도 ///
	class User{
	    //캡슐화
	    private String name;
	    private String email;
	    public User(String name, String email){
	        this.name = name;
	        this.email = email;
	    }
	    String getName() {return name;}
	}
	
	class UserRepository {
	    public void save(User user) { //저장 로직 구현
	        System.out.println("사용자 정보가 데이터베이스에 저장되었습니다");
	    }
	}
	class UserService {
	    private UserRepository userRepository;
	    public UserService(UserRepository repository){
	        this.userRepository = repository;
	    }
	    public void registerUser(User user){ //회원가입 로직
	        if(user.getName().isEmpty()){
	            System.out.println("이름을 반드시 기입해주세요");
	            return;
	        }
	        userRepository.save(user);
	    }
	}
	
	public class D_Coupling_Cohesion {
	    public static void main(String[] args) {
	        /// 낮은 결합도 ///
	        Payment payment = new CreditCardPayment(); //의존성 주입
	        OrderClass order = new OrderClass(payment);
	        order.checkout(); //신용카드로 결제합니다
	    }
	}









