
클래스의 구조 : 필드, 메서드, 생성자

=== 생성자 ===
: 객체(인스턴스)가 생성될 때 호출되는 '인스턴스 초기화 메서드'



1. 생성자 조건
 - 생성자 이름은 클래스 이름과 동일하다
 - 리턴값이 없는 메서드 형식이며 void타입 또한 입력하지 않는다.

 1)'컴파일러가 제공하는 기본 생성자'
    : 클래스에 생성자가 없으면 컴파일러가 자동으로 생성해 준다
      매개변수가 없고, 아무 작업도 하지 않는 생성자이다
 2)'사용자 정의 생성자'
    : 사용자 정의 생성자는 인스턴스 생성 시 반드시 인자값이 필요하다(초기화값)
    : 사용자 정의 생성자 있을 경우, 기본 생성자를 사용할 호출할 때, 기본 생성자를 작성해야한다. 
 cf) 인스턴스 생성
     : 생성자가 인스턴스를 생성하지 않는다
     : new 연산자 키워드가 인스턴스를 생성한다.

	class Example1 {
	    int value;
	    //컴파일러가 제공하는 기본 생성자가 생략되어 있다.
	    //(매개변수가 없고, 아무런 실행코드가 구현되있지 않다)
	    //Example1 () {}
	}
	class Example2 {
	    int value;
	    //사용자 정의 생성자
	    //컴파일러가 자동으로 기본 생성자를 제거한다
	    Example2(int value) {
	        this.value = value;
	    }
	    //사용자 정의 생성자가 1개라도 있는 경우
	    //빈 생성자를 직접 명시해야만 사용가능하다.
	    //Example2() {}
	}

	public class A_Constructor {
	    public static void main(String[] args) {
	        Example1 example1 = new Example1();
	        example1.value = 10;
	        System.out.println(example1.value);

	        //사용자 정의 생성자는 인스턴스 생성 시 반드시 인자값이 필요하다(초기화값)
 	        //Example2 example2 = new Example2();
	        Example2 example2 = new Example2(10);
	        System.out.println(example2.value);
	    }
	}



2. 생성자에서의 this 키워드
  1) this
    : 인스턴스 자신을 참조한다
    : 모든 인스턴스 메서드와 생성자에서 사용가능하다.

  2) this()
    : 생성자의 오버로딩에 사용한다.
      같은 클래스 내의 다른 생성자를 호출할 때 사용한다.
    : 사용자 정의 생성자에서 다른 생성자 호출 시 반드시 첫줄에서만 호출이 가능하다
    : 생성자 이름으로 클래스 이름 대신 this를 사용한다.
    : 호출된 생성자가 변수값을 초기화하는 경우
       해당 생성자가 수행하는 작업을 유지하기 위함이다(무의미함 방지)
    : 중복 코드 제거와 유지보수성 향상에 기여한다

	class Car {
	    String color;
	    String gearType; //auto, menual)
	    int door;

	    // 기본생성자 - 차를 생성한 후 필드값을 할당
	    Car(){}
	    //사용자 정의 생성자
	    Car(String color, String gearType, int door){
	        this.color = color;
	        this.gearType = gearType;
	        this.door = door;
	    }

	    Car(String color){ //생성자의 오버로딩 (생성자 또한 메서드의 일종)
	        //사용자 정의 생성자에서 다른 생성자 호출 시 this()를 사용한다
	        this(color, "auto", 4); //오버로딩을 통해 기어타입과 문갯수 고정.
	        door = 5; //객체 생성 시 색성만 작성하는 경우 - 색상 + auto + 문5개
	        //this(color, "auto", 4); //오버로딩은 인자의 갯수나 데이터타입이 달라야한다.
	    }

	    void displayInfo(){
	        System.out.println(color + " " + gearType + " " + door);
	    }
	}


	public class A_Constructor {
	    public static void main(String[] args) {

	        //기본생성자
	        Car car1 = new Car();
	        car1.color = "red";
	        car1.door = 2;
	        car1.gearType = "manual";
	        car1.displayInfo();

	        //사용자 정의 생성자
	        Car car2 = new Car("white", "auto", 4);
	        car2.displayInfo();

	        //오버로딩
	        Car car3 = new Car("blue");
	        car3.displayInfo();
	    }
	}









=== main 메서드 ===
: Java 프로그램이 실행될 때 가장 먼저 호출되는 메서드
  프로그램의 진입점으로 작동한다
  클래스에 메인 메서드가 없을 경우 JVM 실행 시 오류가 발생한다
>> public static void main(String[] args) {}  (반드시 형식 유지)

 - public : JVM이 외부에서 해당 메서드를 호출할 수 있도록 설정
             프로그램 시작 시 JVM이 접든해야하기 떄문에 반드시 public

 - static : 정적 메서드, 메서드가 인스턴스 생성 없이 호출된다.
            JVM이 클래스의 객체를 생성하지 않고도 메서드를 직접 호출하기 위해 필요하다

 - main : JVM이 프로그램 실행 시 가장 먼저 찾는 메서드 이름이다.
           대소문자를 구분하기 때문에 'main'로 작성한다.

 - String[] args : 명령행에서 전달된 값을 받을 수 있는 매개변수
                     명령행에서 전달되는 모든 인자는 문자열 형태로 전달된다
    

 cf) 클래스
     : Java 프로그램은 클래스 단위로 구성된다
       클래스명은 파일 이름과 동일해야 한다.(대소문자까지 동일해야한다)
     : 메인 메서드(main)를 포함하여 프로그램의 시작 지점을 제공한다

 cf) 파일명클래스 내의 static 메서드
     - static 메서드는 인스턴스 없이 클래스 자체에서 직접 호출한다.
     - main 메서드 내부에서 다른 메서드를 호출할려면 해당 메서드는 static이여야한다.
     - 이미 같은 클래스 내부 이므로 메서드명만으로 사용이 가능하다.
     >> 메서드명(인자값);


	//학생관리 시스템//
	//Student 클래스 설계
	class Student {

	    //필드
	    int studentId; //학생ID
	    String name; //학생 이름
	    int age; // 학생 나이
	    String major; //전공
	    double gpa; //평균 학점

	    //메서드 - 출력
	    void printStudentInfo(){
	        System.out.println("ID: " + studentId + ", Name: " + name + ", Age: " + age + ", Major: "
	        + major + ", GPA: " + gpa);
	    }
	    //메서드 - 평점 업데이트
	    void updateGpa(double newGpa){
	        this.gpa = newGpa;
	    }

	    //생성자
	    Student(){
	        this.studentId = 0;
	        this.name = "Unknown";
	        this.age = 0;
	        this.major = "Undeclared";
 	        this.gpa = 0.0;
 	   }
	    //사용자정의 생성자
	    Student(int studentId, String name, int age, String major, double gpa){
	        this.studentId = studentId;
	        this.name = name;
	        this.age = age;
	        this.major = major;
	        this.gpa = gpa;
	    }
	    //사용자정의 생성자 오버로딩
	    Student(int studentId, String name, int age){
	        this.studentId = studentId;
	        this.name = name;
	        this.age = age;
	    }
	}


	public class B_StudentManagementApp {
	    public static void main(String[] args) {
	        //학생 추가
	        //Student student1 = new Student(1, "이승아", 28,"GPT반",4.0);
	        addStudent(1, "이승아", 28, "GPT반", 4.0);
	        //Student student2 = new Student(2, "홍길동", 40,"IoT반",3.8);
	        addStudent(2, "홍길동", 40,"IoT반",3.8);
	        //Student student3 = new Student(3, "마이콜", 19,"빅데이터반",4.1);
	        addStudent(3, "마이콜", 19,"빅데이터반",4.1);

	        printAllStudents();

	        findStudentById(4);
	        findStudentById(2);

	        updateStudentGpa(5, 3.9);
	        updateStudentGpa(1, 4.5);
	    }

	    //static 메서드
	    //리스트 생성
	    static ArrayList<Student> studentList = new ArrayList<>();
	   //학생 추가
	    static void addStudent(int id, String name, int age, String major, double gpa){
	        Student student = new Student(id, name, age, major, gpa);
	        studentList.add(student);
	        System.out.println("학생이 등록되었습니다");
	    }
	    //모든 학생 출력
	    static void printAllStudents(){
	        System.out.println("===전체 학생 목록===");
	        for(Student student : studentList){
	            student.printStudentInfo();
	        }
	    }
	    //학생 검색
	    static void findStudentById(int studentId){
 	       for(Student student : studentList){
	            if(student.studentId == studentId){
	                student.printStudentInfo();
	                return;  //리턴시켜서 메소드 종료 -> 아래의 출력문이 출력 안됨
	            }
	        }
	        System.out.println("해당 ID의 학생을 찾을 수 없습니다");
	    }
	   //학점 수정
	    static void updateStudentGpa(int studentId, double newGpa){
	        for(Student student : studentList){
 	           if(student.studentId == studentId){
	                student.updateGpa(newGpa);
	                System.out.println("평점이 업데이트되었습니다");
	                return;
 	           }
	        }
	        System.out.println("해당 ID의 학생을 찾을 수 없습니다");
	    }






=== 상속(Inheritance) ===
: 한 클새스의 속성과 메서드를 다른 클래스가 물려받는 것을 말한다
- 기존의 클래스를 재사용하여 새로운 클래스를 작성한다
- 코드의 재사용성과 중복을 제거한다(프로그램의 생산성 향상)


1.상속 방법
 : extends 키워드를 사용하여 구현한다 (확장한다)
 >> class 자식클래스명 extends 부모클래스명 {}


2.명칭
 상속해주는 클래스(Parent) - 조상, 부모, 상위, 기반, 슈퍼 클래스
 상속받는 클래스(Child) - 자손, 자식, 하위, 파생, 서브 클래스

	//부모클래스
	class Animal{
	    String name;
	}
	//자식클래스
	class Dog extends Animal {
	    //부모 클래스의 속성과 메서드를 모두 상속 받음
	    //String name; 생략
	    void bark(){
	        System.out.println("강아지가 짖습니다");
	    }
	}

	public class C_Inheritance01 {
	    public static void main(String[] args) {
	        Dog choco = new Dog();
	        choco.name = "초코";
	        System.out.println(choco.name); //초코
	    }







=== 상속에서의 생성자 ===
- 상속받은 클래스에서 생성자 호출은 부모에서 자식 순서로 진행한다
- 자식 클래스 객체를 생성할 때, 자식 클래스는 부모 클래스의 생성자를 통해 객체를 생성한다
  자식 클래스의 생성자 호출 시 항상 부모 클래스의 생성자가 호출된다
  자식클래스에서 부모클래스의 생성자를 사용하기 위해 별도의 호출을 필요로 하지는 않다


super키워드
 1) super();
   - 부모클래스 내의 생성자를 호출한다.
     부모 클래스 내에 정의된 생성자 형태 그대로 사용한다.
   - 자식클래스의 기본 생성자는 사용자 정의 생성자 호출이 없더라도
      super() 부모 클래스 생성자 호출 키워드가 정의되어 있다.
   - 자식클래스 생성자 내부에는 super();가 생략되어있다
   >> 'super();' 대신 '부모클래스명();' 사용 가능하다.

 2) super.
   해당 클래스가 가진 인스턴스 변수에 접근 >> this(생략 가능)
   부모 클래스가 가진 인스턴스 변수에 접근 >> super(생략 불가)
   - super : 부모클래스로 생성된 객체 그 자체를 의미한다
   - 부모클래스 내의 필드와 메서드에 접근 .연산자를 사용한다.
   >> super.필드명;
        super.메서드명();



	class Mammal {
	    String name = "Parent";
	    int number = 10;

	    Mammal() {
	        System.out.println("빈 부모 생성자 - 인스턴스 생성");
	    }
	    Mammal(String name){
	        this.name = name; //필드와 지역변수의 이름이 같을 경우 구분을위해 this. 키워드 사용
	    }

	    void displayMammal(){
	        System.out.println(name);
	    }
	}


	class Cat extends Mammal {

	    String name = "Child";

	    Cat(){
	        //super(); 생략
	        System.out.println("빈자식 생성자");
	    }
	    Cat(String name){
	        //super()는 부모클래스의 생성자를 가져오는 키워드이다.
	        super(name); //Mammal(String name)에 choco로 입력

	        //this.name = name;
	        System.out.println("자식클래스가 생성되었습니다");
	    }

	    //인스턴스 메서드
	    void greet(){
	        //해당 클래스가 가진 인스턴스 변수에 접근
	        //: this(생략 가능)
	        System.out.println("자식이름: " + this.name); //자식이름: Child
	        System.out.println("자식이름: " + name); //자식이름: Child
	        //부모 클래스가 가진 인스턴스 변수에 접근
	        //: super(생략 불가)
	        System.out.println("부모이름: " + super.name); //부모이름: choco
	        System.out.println("부모이름: " + name); //부모이름: Child
	    }
	}


	public class C_Inheritance02 {
	    public static void main(String[] args) {
	        Cat cat = new Cat();
	        //빈 부모 생성자
	        //빈 자식 생성자
	        Cat cat2 = new Cat("choco"); //super() 키워드로 인해 부모클래스에 입력
	        System.out.println(cat2.name); //Child

	        cat2.greet();
	        //자식이름: Child
	        //자식이름: Child
	        //부모이름: choco
	        //부모이름: Child

	        System.out.println(cat2.number); //10
	    }
	}







===오버라이딩===
: 자식클래스가 부모클래스에서 상속받은 메서드를 자신의 상황에 맞게 '재정의'하는것을 말한다.
- 부모 클래스의 기본 동작을 자식클래스에서 변경하거나 확장할 때 사용한다.
- 부모로부터 상속받은 속성이나 메서드를 확장하는 개념으로
  해당 상태나 동작을 반드시 가지지만 상속받은 클래스마다 차이를 두고 싶을 때 사용한다.

@Override
 : 자바에서 제공하는 어노테이션(annotation) (주석)
 - 부모클래스의 메서드를 자식 클래스에서 재정의했다는 것을 명시적으로 나타낸다.
 - 생략해도 오류가 나지 않는 이유는 자바 컴파일러가 메서드 시그니처(이름, 매개변수, 반환타입)을 비교하여
   부모클래스의 메서드를 자식 클래스에서 재정의헀는지 자동으로 판단한다.
 cf)어노테이션이란 코드에 메타데이터를 제공하는 방법을 말한다

 1) 오버라이딩의 특징
   - 메서드의 시그니처가 일치해야한다
     부모클래스에서 정의된 메서드와 동일한 이름과 매개변수 구성을 가져야한다.
     반환 타입은 같거나 자동 형 변환이 가능하게 작성해야한다.

 2) 오버라이딩 구형 방법
   - 부모클래스의 상속받은 메서드를 자식클래스에서 다시 정의한다.
     매서드명, 매개변수, 반환타인이 같아야한다. (반환타입은 자동 형 변환 가능하게)
     메서드 위에 @Override 어노테이션을 작성하여 안정성과 가독성을 챙긴다.

 3) 오버라이딩 사용 목적
   - 다형성 구현 : 하나의 이름으로 여러 기능을 수행할 수 있다
   - 재사용성, 확장성 향상 : 기존의 코드 변경 없이, 새로운 기능을 추가하거나 변경이 가능하다.



=== 오버로딩(Overloading)과 오버라이딩(Overriding) ===
: 메서드의 이름을 재사용하는 방법 (다형성)

 1)오버로딩
   - 같은 클래스 내에서 같은 이름을 가진 메서드를 여러개 정의한다
   - 메서드의 동작을 다양한 상황에 맞게 조정한다
    : 메서드명은 동일
    : 매개변수의 타입, 개수, 순서 중 하나는 달라야한다
    : 반환타입은 관련이 없다

 2)오버라이딩
   - 상속 관계에 있는 클래스에서 사용
   - @Override 이노테이션을 사용한다 (컴파일러에게 정보 전달)
    : 메서드의 시그니처(반환타입, 이름, 매개변수)가 같아야한다.
    : 메서드의 동작을 변경하거나 확장시키는 개념이다


	class ParentClass {
	    void exercise () {
	        System.out.println("달리기를 잘합니다");
	    }
	}
	class ChildClass extends ParentClass {
	//부모클래스의 메소드가 생략되어있다.
	//    void exercise () {  
	//        System.out.println("달리기를 잘합니다");
	//    }
	    @Override
	    void exercise () {  //JVM이 자동으로 오버라이딩 해준다.
	        System.out.println("달리기도 잘하고 피구도 잘합니다");
	    }
	}


	class AnimalClass {
	    void sound(){
	        System.out.println("동물이 소리를 냅니다");
	    }
	}
	class DogClass extends AnimalClass {
	    @Override
	    void sound(){
	        System.out.println("개가 멍멍하고 웁니다");
	    }
	}
	class CatClass  extends AnimalClass {
	    @Override
	    void sound(){
	        System.out.println("고양이가 냐옹하고 웁니다");
	    }
	}


	public class D_Overriding {
	    public static void main(String[] args) {
	        DogClass dog1 = new DogClass();
	        dog1.sound();  //개가 멍멍하고 웁니다
	        CatClass cat1 = new CatClass();
	        cat1.sound();  //고양이가 냐옹하고 웁니다
	        AnimalClass animal1 = new AnimalClass();
	        animal1.sound();  //동물이 소리를 냅니다
	    }
	}