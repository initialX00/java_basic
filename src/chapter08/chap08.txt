

=== 추상화(Abstract) ===
1.추상 클래스
 1)추상클래스의 정의
   : 미완성 설계도, 완전하지 않은 클래스를 말한다.
   - 자체적으로 인스턴스를 생성할 수 없다.
   - 다른 클래스가 상속받아 완성해야만 사용가능하다.

 2)추상클래스의 특징
   - 클래스 자체로 인스턴스 생성이 불가하다
   - 하나 이상의 추상메서드를 포함해야한다. 일반메서드도 함께 존재 가능하다.
   - 확장성 제공을 위해 사용된다.
     자식 클래스들이 공통된 기능을 공유하며 고유 기능을 고현하도록 강제한다.
   - 다중 상속이 불가하다. (extends 한번만, 중첩은 불가)

 3) 추상클래스의 구현방법
   >> abstract class 클래스명
   - 자식클래스에서 정의를 명확히하거나 추상메서드 제거하기 전까지 오류가 노출된다
     Error - Class 'Police' must either be declared abstract or implement abstract method 'work()' in 'Human'



2.추상메서드
 : 메서드의 선언부만 존재하고, 구현부가 없는 메서드를 말한다.
 - 자식클래스에서 해당 메서드를 반드시 구현하도록 강제하는 역할을 한다.
   추상메서드는 자식클래스에서 반드시 오버라이딩해야한다. 일반메서드는 필요에 따라 선택.
 - 구현부 {} 대신 세미콜론(;)을 사용하여 선언을 마친다.
  >> abstract (접근제어자) 반환타입 메서드명 (매개변수);

 cf)메서드의 구성 : 선언부 + 구현부
   >> (접근제어자) 반환타입 메서드명 (매개변수) {메서드의 기능}


	//추상클래스의 다중상속
	abstract class lion {
	    abstract void mane(); //갈퀴
	}
	abstract class tiger {
	    abstract void stripe(); //줄무늬
	}
	//class Liger extends Lion extends Tiger{ - 다중상속 불가
	//    void mane() {}
	//    void stripe() {} - 매당 메서드를 상속 받을 수 없다
	//}


	//상속과 객체화
	abstract class Animal { //추상클래스
	    abstract void makeSound(); //추상메서드 - 구현부{} 없음
	    void eat() {
	        System.out.println("동물이 먹이를 먹습니다");
	    }
	}
	class Dog extends Animal{
	    void makeSound(){ //추상메서드 구현, 오버라이딩
	        System.out.println("멍멍");
	    }
	    @Override
	    void eat() {
	        System.out.println("강아지는 개껌을 먹습니다");
	    }
	}
	class Cat extends Animal{
	    void makeSound(){ //추상메서드 구현
	        System.out.println("야옹");
	    }
	}


	public class A_Abstract {
	    public static void main(String[] args) {
	        //추상클래스는 인스턴스화 불가능
	        //Animal animal = new Animal();

	        Dog dog = new Dog();
	        Cat cat = new Cat();

	        cat.makeSound(); //자식클래스에서 정의된 기능
	        cat.eat(); //부모클래스에서 정의된 기능

	        dog.makeSound(); //자식클래스에서 정의된 기능
	        dog.eat(); //자식클래스에서 오버라이딩된 기능
	    }
	}

	cf) 추상클래스를 다시 추상클래스로 상속하여
	    부모 추상클래스의 추상 메서드를 구현화하고
	    자식 추상클래스만의 추상 메서드를 추가로 만든다.








=== 인터페이스(interface) ===
: 상호작용에 대한 약속, 객체가 어떤 방식으로 동작해야하는지 정의하는 추상 타입
: 추상메서드와 상수만이 포함된 특수한 클래스
- 모든 메서드는 추상메서드로 구성
- 상수는 public static final 특성을 가져서 재정의 불가하다.
- 실제 구현은 인터페이스를 구현한 클래스에서 담당한다.
 생성 >> interface 인터페이스명 {}
 구현 >> class 구현부클래스명 implements 생성부클래스명 {}



1.인터페이스의 특징
 1)메서드
   : 모든 메서드는 기본적으로 public abstract로 선언된다 - 생략 가능
   - 모든 메서드가 추상메서드여야한다.
     해당 인터페이스 활용을 위해 모든 클래스에서 접근 가능하다(public)
 2)변수(필드)
   : 모든 변수는 기본적으로 public static final로 선언된 상수이다 - 생략 가능
   - final은 변수명은 대문자로 작성하고, 상수만 선언할 수 있다.
 3)다중 구현을 지원한다
   : 한 인터페이스에서 여러 인터페이스를 동시에 구현 가능하다.
 4)객체의 행동을 정의하는 역할을 수행한다.



2.추상클래스와 인터페이스
 1) 추상 클래스
   - 공통적인 기능을 제공하는 '부분적 구현'
   - 구성요소 : 추상메서드, 구체메서드, 필드, 생성자
   - 단일 상속 가능 (extends,확장), 기본 구현을 제공하고 확장이 가능하다.

 2) 인터페이스
   - 클래스의 행동을 정의한다.
   - 구성요소 : 추상메서드, 상수(필드), 디폴트 메서드, 정적 메서드
   - 다중 구현 가능 (implements,구현), 객체가 해야할 동작을 정의한다.
      cf) 디폴트 메서드
        : 인터페이스에 새 기능을 추가하면서 기존 구현을 포함한 메서드
        - 기본 구현을 제공하고, 오버라이딩(재정의) 가능하다
        - default는 생략할 수 없다.
        >> default void 메서드명() {구현부}
      cf) 정적 메서드
        : 인터페이스에서 직접 구현한다.
        - 인터페이스 이름으로 직접 호출하며,
          오버라이딩이 불가능하다. (객체 인스턴스 없이 사용 가능하다)
        - 인터페이스와 관련된 공통 동작(유틸리티) 메서드를 제공하기 위해 사용한다.
        >> static 반환타입 메서드명() {구현부}



3.인터페이스의 생성과 구현
     1)생성
      >> interface 인터페이스명 {}
      - 인터페이스의 모든 메서드는 기본적으로 public 접근제어자를 가진다
        인터페이스 자체가 '어떤 동작을 외부에서 사용할 수 있음'을 보장하기때문이다

     2)구현
      >> class 구현부명 implements 인터페이스명 {}
      - 구현부에서 메서드들은 default로 변경되어 public을 다시 지정해야한다.
      cf) public 지정
         인터페이스 안의 추상 메서드를 구현한 클래스 메서드는 public 지정을 해야한다.
      cf) 디폴트 메서드 재정의
         인터페이스 내의 티폴트 메서드 재정의 시 public 설정이 필요하다

	interface PlayingCard {
	    //1. 멤버변수 : 상수 선언
	    // public static final의 특성을 가짐, 생략가능
	    public static final int SPADE = 4;
	    public  int DIAMOND = 3; //생략 가능
	    static final int HEART = 2; //부분누락 가능
	    int CLOVER = 1;

	    //2. 메서드
	    // public abstract 특성을 가짐, 생략가능.
	    public abstract String getCardNumber();
	    String getCardKind(); //생략가능

	    //3. 디폴트 메서드
	    //>> default void 메서드명() {구현부}
	    default void defaultMethod() {
 	       System.out.println("디폴트 메서드입니다");
	    }
	    //void noDefault() {} - 인터페이스의 디폴트메서드에서는 default를 생략할 수 없다

	    //4. 정적 메서드
	    //>> static 반환타입 메서드명() {구현부}
	    static void staticMethod() {
	        System.out.println("정적 메서드입니다");
	    }
	}

	//인터페이스 구현
	//implements 키워드 사용
	class Card implements PlayingCard {
	    private String cardNumber;
	    private String cardKind;

	    Card(String cardNumber, String cardKind){
	        this.cardNumber = cardNumber;
	        this.cardKind = cardKind;
	    }

	    //인터페이스 안의 추상 메서드를 구현한 클래스 메서드는 public 지정을 해야한다.
	    public String getCardNumber() {
	        return cardNumber;
	    }
	    public String getCardKind() {
	        return cardKind;
	    }

	    //디폴트 메서드 재정의
	    //인터페이스 내의 티폴트 메서드 재정의 시 public 설정이 필요하다
	    @Override
	    public void defaultMethod() {
	        System.out.println("Card 클래스에서 재정의된 디폴트 메서드");
	    }
	    //cf)인터페이스의 모든 메서드는 기본적으로 public 접근제어자를 가진다
	    //  : 인터페이스 자체가 '어떤 동작을 외부에서 사용할 수 있음'을 보장하기때문이다
	}


	public class B_Interface01 {
	    public static void main(String[] args) {
	        //인터페이스의 추상메서드 사용
 	       Card card = new Card("7", "HEART");
 	       System.out.println(card.getCardNumber());
 	       System.out.println(card.getCardKind());

	        card.defaultMethod();

	        //card.staticMethod();
	        PlayingCard.staticMethod();

	        System.out.println(PlayingCard.CLOVER);
	        System.out.println(PlayingCard.DIAMOND);
	        System.out.println(PlayingCard.HEART);
	        System.out.println(PlayingCard.SPADE);
	    }
	}







 인터페이스의 (멤버) 변수의 특성
: 자동으로 public static final 특성을 가진다
- 어디서든 접근 가능하다
- 인스턴스화 없이 인터페이스명으로 접근 가능하다.(모두 같은 값 공유)
- 값 변경이 불가능하다. 선언과 동시에 초기화가 필요하다.
 cf) 클래스의 '멤버', 인터페이스의 '멤버'
  - 멤버란 해당 구조의 구성요소 (필드, 메서드, 생성자)

=== 다중 인터페이스 ===
: implements 키워드에 여러 개의 인터페이스를 콤마(,)로 구분하여 나열한다.
 >> class 구현부명 implements 인터페이스명1, 인터페이스명2 {}

 cf)주의사항
   : 여러개의 인터페이스에서 같은 시그니터(선언부)를 가진 디폴트 메서드가 존재할 경우
     반드시 오버라이드하고 명시적으로 구현한다.
   - 재정의가 불가능한 추상메서드는 중복되더라도 하나로 취급하여 넘어간다
   - 재정의가 가능한 디폴트메서드는 중복될 경우 인터페이스 구현에서 오류가 난다.
     인터페이스 구현에서 오버라이딩 해줘야한다.

 cf)인터페이스의 다형성
   : 인터페이스를 구현한 클래스의 객체는 해당 인터페이스의 타입으로 동작 가능 (해당 타입이 될 수 있음)
   - 해당 인터페이스 내의 구조만 가진다
   - 재정의된 메서드는 유지된다

	//다중 인터페이스 구현
	interface Example1 {
	    int EXAMPLE_VARIABLE = 10;
	    void printVar1();

	    default void method(){
	        System.out.println("디폴트1");
	    }
	}
	interface Example2 {
	    //추상메서드는 재정의가 불가하므로 중복되더라도 하나로 취급하여 넘어간다
	    void printVar1();
	    void printVar2();

	    //디폴트메서드는 재정의가 가능하여 중복될 경우 인터페이스구현에서 오류가 난다.
	    //인터페이스 구현에서 오버라이딩 해줘야한다.
	    default void method(){
	        System.out.println("디폴트2");
	    }
	}

	class ExampleClass implements Example1, Example2 {
	    public void printVar1() {
	        System.out.println(EXAMPLE_VARIABLE);
	    }
	    public void printVar2() {
	        System.out.println("다중인터페이스 구현");
	    }
	    //재정의가 가능한 디폴트 메소드는 오버라이딩이 필요하다
	    @Override
	    public void method(){
	        System.out.println("중복된 디폴트 메소드");
	    }
	}

	public class B_Interface03 {
	    public static void main(String[] args) {
	        ExampleClass exampleClass = new ExampleClass();
	        exampleClass.printVar1();
	        exampleClass.printVar2();
 	        exampleClass.method();

	        Example1 example1 = exampleClass; //업스캐일링
	        example1.printVar1();
	        //example1.printVar2();
	        example1.method();
	    }
	}







  cf) A instanceof B 연산자
     : A 객체가 B 클래스와 같은 종류인지 확인하는 도구

	class 동물 {}
        	class 고양이 extends 동물 {}
        	class 강아지 extends 동물 {}
        	동물 애니멀 = new 동물();
        	동물 야옹이 = new 고양이();
        	동물 멍멍이 = new 강아지();
        	//고양이 고양이변환 = (고양이) 애니멀; - 형 변환이 불가능한 상황
        	System.out.println(야옹이 instanceof 고양이);  //참
        	System.out.println(멍멍이 instanceof 고양이);  //부정
        	System.out.println(멍멍이 instanceof 동물);  //참
        	System.out.println(애니멀 instanceof 고양이);  //부정



	Fruit[] fruits = { apple, orange, banana, mango}; //mango가 Fruit로 다시한번 업캐스팅
	        for (Fruit fruit : fruits) {
	            fruit.describe();
	           //instanceof로 인터페이스의 구조(메서드의 갯수 등)를 비교함. 
 	           //망고는 Fruit의 메서드 3개 + Mango의 메서드 1개의 총 4개의 메서드 구조를 가지고 있다.
	            if(fruit instanceof TropicalFruit) {
	                TropicalFruit tropicalFruit = (TropicalFruit) fruit; //다운캐스팅하여 자식클래스의 메서드 접근
	                tropicalFruit.tropicalFeature(); // 열대 과일은 후숙하면 더 맛있습니다.
	            }
	        }

	        //망고는 Fruit의 메서드를 가지고 있으므로, 동일한 구조를 포함하고 있어서 참이다
	        if (mango instanceof Fruit) {
	            Fruit mangoAsFruit = (Fruit) mango;
	            mangoAsFruit.describe(); // 과일의 색상은golden이며, 모양은 타원형입니다.
	        }

 	       //바나나는 TropicalFruit에서 추가된 메서드를 안 가지고 있으므로 부정이다.
	        if (banana instanceof TropicalFruit) {
	            TropicalFruit bananaAsTropical = (TropicalFruit) banana;
	            bananaAsTropical.tropicalFeature();
	        } else{
	            System.out.println("바나나는 열대과일이 아닙니다");
	        }





