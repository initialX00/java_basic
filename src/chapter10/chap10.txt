
=== 자바 컬렉션 프레임워크 ===
Collection은 인터페이스에서 인터페이스로
implements는 인터페이스에서 클래스로
    

1. 컬렉션 프레임워크랑
 : 데이터를 저장하고 처리하는 자료구조의 표준화 된 설계이다
 - 다양한 자료구조를 제고, 데이터의 효율적인 관리를 지원한다.
 >> 컬렉션 프레임워크 사용 방법
     - 데이터의 특성에 맞는 클래스를 선택
     - 데이터의 중복에 대한 필요성, 순서 유지에 대한 필요성 점검
     - 키-값 쌍 데이터의 필요성


2. 컬렉션 프레임워크의 주요 '인터페이스'와 특성
 1) Collection
   - 자바 컬렉션 프레임워크의 최상위 인터페이스
   - 데이터의 집합을 다룬다 (List, Set 등이 하위 인터페이스)

 2) List
   - 데이터의 순서를 유지한다 (Index로 접근 가능)
   - 중복을 허용한다
   - 주요 구현체 : ArrayList, LinkedList, Vector 등

 3) Set
   - 데이터의 순서를 유지하지 않는다 (특정 구현체는 정렬 또는 순서 제공이 가능하다*)
   - 중복을 허용하지 않는다
   - 주요 구현체 : HashSet, TreeSet*, LinkedHashSet*

 4) Map
   - 키(key)-값(Value) 쌍으로 이루어진 데이터를 다룬다
   - 키는 중복을 허용하지 않고, 값은 중복을 허용한다
   - 주요 구현체 : HashMap, TreeMap, LinkedHashMap

  cf) Queue(큐) : FIFO(First In, First Out)
      Stack(스택) : LIFO(Last In, First Out)










=== List 인터페이스 ===
List 특징
 - 데이터를 "순차적"으로 저장하고 접근하는데 사용한다.
 - 요소의 인덱스를 통해 정확한 위치를 지정한다
 - 요소의 중복 허용한다
 - 다양한 구현체를 통해 사용 가능하다



ArrayList와 LinkedList
: 둘다 List의 주요메서드이기때문에 메서드의 사용법은 같다.


1. ArrayList
   : 내부적으로 배열을 사용하여 요소를 저장한다
   - 빠른 읽기 성능, 느린 삽입 및 삭제 성능을 가진다.
   - 순차적으로 데이터를 관리로 빠른 데이터 조회에 적합하다
   - 중간 삽입 및 삭제 시 데이터 이동이 필요하므로 상대적으로 성능이 저하된다.
     ex) 정렬된 책장
         책의 번호를 아는 경우 해당 책장에서 책을 빠르게 자져올 수 있다.
         새 책을 책장의 중간에 추가하는 경우 뒷책을 모두 한칸씩 옮겨야하므로 시간이 오래 걸린다


2. LinkedList
   : 내부적으로 이중연결 리스트를 사용하여 요소를 저장한다
   : 빠른 삽입 및 삭제 성능, 느린 데이터 접근 성능을 가진다.
   - 연결 기반 데이터 관리로 비순차적 데이터 작업에 적합하다
   - 특정 요소 접근 시 순차 탐색이 필요하므로 성능이 저하됩니다.
      ex) 도서 대출 리스트
         새로운 대출 기록을 추가하거나 기존 기록을 제거하는 것이 용이하다
         옆의 요소와 연결만 변경하면 추가 및 삭제가 가능하다.
         특정 날짜와 대출 기록을 찾으려면 처음부터 하나씩 기록을 읽어야하므로 시간이 오래 걸린다


  cf) length : 배열의 길이 알려 할 때
       length() : 문자열의 길이를 알려 할 때
       size() : Collection 자료구조의 크기를 알려 할 때

  cf) 클래스 구조에는 객체 타입의 데이터만 삽입 가능하다
      - 기본 데이터 타입 : int, char, boolean 불가
      - 객체 형식 타입 : integer, Character, Boolean 가능


3. 함수
 .add(요소) : 배열 마지막에 요소 추가
 .add(index, 요소) : 해당 인덱스에 요소 추가
 .get(index) : 해당 인덱스값 읽기(불러오기)
 .set(index, 요소) : 해당 인덱스를 해당 요소로 수정
 .remove(index) : 해당 인덱스의 요소 삭제
 .clear() : 자료구조 전체 비우기
 .size() : 컬렉션 자료구조의 크기
 .contains(요소) : 해당 요소가 자료구조에 있는지 boolean으로 반환


	import java.util.ArrayList;
	import java.util.LinkedList;

	public class B_List {
	    public static void main(String[] args) {


	        //1.ArrayList//
	        System.out.println("=== ArrayList 에제 ===");
	        //cf)ArrayList 클래스는 AbstractList를 상속받는다
	        //   AbstractList 추상클래스는 List 인터페이스를 구현한다.
	        ArrayList<String> arrayList = new ArrayList<>();

	        //데이터추가 - 느림
	        arrayList.add("Java");
	        arrayList.add(0,"Python"); //원하는 인덱스에 요소 추가
	        arrayList.add("JavaScript");
	        System.out.println(arrayList); //[Python, Java, JavaScript]

	        //데이터 읽기 - 빠름
	        String firstElement = arrayList.get(0);
	        System.out.println(firstElement); //Python

	        //데이터 수정 - 빠름
	        arrayList.set(2, "TypeScript");
	        System.out.println(arrayList); //[Python, Java, TypeScript]

	        //데이터 삭제 - 느림
	        String removedElement = arrayList.remove(1);
	        System.out.println(arrayList); //[Python, TypeScript]

	        //리스트 크기
	        System.out.println(arrayList.size()); //2

	        //리스트 비우기
	        arrayList.clear();
	        System.out.println(arrayList); //[]



	        //2.LinkedList//
	        System.out.println("=== LinkedList ====");
	        LinkedList<String> linkedList = new LinkedList<>();

	        //데이터 추가
	        linkedList.add("Apple");
	        linkedList.add("Orange");
	        linkedList.add("Mango");
	        linkedList.add(1, "Banana");
	        System.out.println(linkedList);  //[Apple, Banana, Orange, Mango]

	        //데이터 읽기
	        String secondFruit = linkedList.get(1);
	        System.out.println(secondFruit);  //Banana

	        //데이터 포함 여부 확인
	        System.out.println("리스트에 Orange 포함됐나? : " + linkedList.contains("Orange"));  //true
	        System.out.println("리스트에 Strawberry 포함됐나? : " + linkedList.contains("Strawberry"));  //false

	        //데이터 삭제
	        linkedList.clear();
	        System.out.println(linkedList);  //[]





	        //=== ArrayList와 LinkedList 성능 비교 ===//
	        System.out.println("=== ArrayList와 LinkedList 성능 비교 ===");
	        ArrayList<Integer> arrayListTest = new ArrayList<>();

	        long startTime = System.nanoTime(); //시간을 나노초 단위로 변환
	        for(int i = 0; i < 100000; i++){
	            arrayListTest.add(0,i); //항상 맨압에 삽입
	        }
	        long endTime = System.nanoTime();
	        System.out.println("ArrayList 삽입 시간 : " + (endTime - startTime) + "[ns]"); //3억 나노초


	        LinkedList<Integer> linkedListTest = new LinkedList<>();
	        startTime = System.nanoTime(); //시간을 나노초 단위로 변환
	        for(int i = 0; i < 100000; i++){
	            linkedListTest.add(0,i); //항상 맨압에 삽입
	        }
	        endTime = System.nanoTime();
	        System.out.println("LinkedList 삽입 시간 :  " + (endTime - startTime) + "[ns]"); //3백만 나노초

	    }
	}









==== List 인터페이스와 Set 인터페이스 ===
List 인터페이스 : 중복 가능, 순서 있음, null 포함 가능
Set 인터페이스 : 중복 불가, 순서 없음, null 포함 가능


=== Set 인터페이스 ===
 : 중복된 요소를 포함하지 안는 객체의 집합
 : 객체의 저장 순서를 저장하지 않는다 (삽입 순서가 유지되지 않는다)
 : null 요소를 포함 가능하다

1. Set 컬렉션 종류 (구현체)
 1) HashSet
   : 가장 많이 사용되는 Set 구현체, 빠른 데이터 접근과 삽입을 지원하다
   - 정렬 또는 순서를 보장하지 않는다

 2) LinkedHashSet
   : HashSet에서 순서를 추가한 형태
   - 중복은 안되지만 순서는 있다. 인덱스 번호는 존재하지 않는다. 요소끼리의 접근 요소로 순서가 생긴다.

 3) TreeSet
   : 데이터가 자동 정렬, 중복 제거와 정렬된 순서 유지가 필요할 때 사용한다.
   - 중복은 안되지만 순서는 있다. 특정 차순으로 정렬을 한다.

2. Set 컬렉션의 주요 메서드
   : add(), remove(), contains(), size(), isEmpty()
    Set 컬렉션의 선언 방법
    >> Set<E데이터타입> set명 = new Set컬렉션종류<>();


	import java.util.HashSet;
	import java.util.Set;

	public class D_Set {
	    public static void main(String[] args) {
	        Set<String> exampleSet = new HashSet<>();

	        exampleSet.add("자바");
	        exampleSet.add("파이썬");
	        exampleSet.add("C++");
	        exampleSet.add("자바스크립트");
	        System.out.println(exampleSet);  //[C++, 파이썬, 자바, 자바스크립트] - 순서없음

 	        exampleSet.remove("자바");
	        System.out.println(exampleSet); //[C++, 파이썬, 자바스크립트] - 제거
	        System.out.println(exampleSet.size()); //3 - 길이

	        exampleSet.add("파이썬");
	        System.out.println(exampleSet); //[C++, 파이썬, 자바스크립트] - 중복불가

	        System.out.println(exampleSet.contains("자바스크립트")); //true
	        System.out.println(exampleSet.contains("자바")); //false - set에서는 부분이 아니라 그자체를 비교한다.

	        System.out.println(exampleSet.isEmpty());  //false
	        exampleSet.clear();                        //삭제
	        System.out.println(exampleSet.isEmpty());  //true
	    }
	}









=== Map 인터페이스 ===
 : 키(key)와 값(value)의 쌍으로 용소를 저장하는 데이터 구조
 - 키는 고유한 데이터를 가진다 (중복 키 불가)
 - 동일한 키값에 서로 다른 값을 전달하는 경우 기존 값이 새로운 값으로 덮어씌워진다
 - 서로 다른 키에서 동일한 값 저장은 가능하다.
 - 키의 유일성, 값의 중복성, 순서보장이 되지 않는다.
   단 LinkedHashMap은 순서를 보장한다.
 - 키를 기반으로 빠른 검색이 가능하다.
    ex) name : "김씨"가 존재한 상태에서 name : "이씨"을 추가하는 경우 name의 키에는 "이씨"만이 존재한다.


1. Map 인터페이스 종류 (구현체)
    1) HashMap
    : 가장 많이 사용되는 Map 구현체
    : 키와 값에 null을 허용한다
    - 빠른 검색 및 삽입 성능을 제공한다.
    - 순서 유지는 보장하지 않는다.

    2) LinkedHashMap
    : HashMap + 삽입 순서 유지
    - 삽입 순서가 중요하고 빠른 검색이 중요할때 쓰인다

    3) TreeMap
    : 키에 따라 자동 정렬 기능을 보장한다.
    - 키에 null을 허용하지 않는다.


2. Map 인터페이스 메서드
    put(key, value) : 키와 값을 Map에 추가한다
    get(Object key) : 지정된 키에 매핑된 '값'을 반환한다
    remove(Object key) : 주어진 키와 연관되니 '키-값' 쌍을 삭제한다 (반환)
    containsKey(Object Key) : 주어진 키가 Map에 있는 지 확인 후 boolearn값으로 반환한다.

    keySet() : Map의 키를 Set으로 반환한다
    values() : Map의 값을 List로 반환한다
               Collection의 경우 켈럭션 프레임워크들의 상위 집합이다.
    entrySet() : Map의 키-값 쌍을 나타내는 Set을 반환한다.

    Map 컬렉셔 선언 방법
    >> Map<키타입, 값타입> 인스턴스명 = new Map종류<>();



	import java.util.*;

	public class E_Map {
	    public static void main(String[] args) {
        
	        //Map 컬렉션 선언
	        Map<String, Integer> students = new HashMap<>();

	        students.put("이씨",50); //이름(키),나이(값);
	        students.put("김씨",60);
	        students.put("서씨",70);
	        System.out.println(students); //{서씨=70, 이씨=50, 김씨=60}
	        //순서를 보장하지 않고, {}중괄호 형식, 키와 값을 =로 구분한다

	        System.out.println(students.get("이씨")); //50
	        students.remove("이씨");
	        System.out.println(students); //{서씨=70, 김씨=60}
	        System.out.println(students.containsKey("김씨"));  //true
	        System.out.println(students.containsKey("최씨"));  //false
	        System.out.println(students.size()); //2

	        System.out.println(students.keySet()); //[서씨, 김씨]
	        System.out.println(students.values());  //[70, 60]

	        Set<String> names = students.keySet();
	        Collection<Integer> ages = students.values();
	        //Collection을 List로 변환
	        //: List 인터페이스의 구현체로 변환
	        List<Integer> listAges = new ArrayList<>(ages);        
	    }
	}








