/// 객체 지향 프로그래밍 ///
: OOP(Object-Oriented Programming)

객체란?
: 데이터(속성)와 해당 데이터를 처리하는 방법(메서드)을 포함하는 프로그래밍의 기본 단위
 - 객체의 예시
  ㅇ커피자판기
    속성 : 커피의 종류, 가격, 현재 재고량, 물 온도
    기능 : 커피 제조, 재고 관리, 가격 설정
  ㅇ학교 관리 시스템
    ㄴ학생 객체
      속성 : 학생 이름, 학번, 수강 과목
      기능 : 성적 조회, 수강 신청
    ㄴ교수 객체
       속성 : 교수 이름, 연구 분야, 담당 과목
       기능 : 강의 계획서 업로드, 성적 입력
    ㄴ수업 객체
       속성 : 과목명, 강의 시간, 강의실
       기능 : 강의 자료 업로드, 출석 체크




/// 객체 지향 프로그래밍의 개념 ///

1.클래스(Class)
 : 객체를 생성하기 위한 템플릿, 데이터(속성)와 메소드(행동)을 정의
 ex) '자동차' 클래스
    - 속성(색상,브랜드, 모델)
    - 메소드(주행, 정지, 속도 변경)

2.객체(Object)
 : 클래스의 인스턴스, 실제로 메모리에 할당되어 동작하는 구체적인 엔티티
 ex) '자동차' 클래스를 기반으로 만드러진 실제 자동차
    - 볼보 xc60 흰색 자동차

3.상속(Inheritance)
 : 한 클래스(부모)의 속성과 메소드를 다른 클래스(자식)가 받아서 사용하는 기능
 ex) '전기 자동차' 클래스
    - 일반 자동차 클래스의 모든 특성으 상속받고
      추가적으로 배터리 관련 속성과 충전 메소드를 가짐

4.다형성(Polymorphism)
 : 같은 메소드 호출이 다른 클래스의 객체에 대해 다른 방식으로 실행 가능
 ex) '주행'이라는 메소드(행동)는 '전기자동차' 객체에서는 전기를 사용
                                        '가솔린자동차' 객체에서는 가솔린을 사용

5.캡슐화(Encapsulation)
 : 객체의 데이터를 외부로부터 숨기고 내부의 메소드를 통해서만 해당 데이터를 조작할 수 있게 하는것
 ex) 자동차의 엔진은 외부에서 직접 조작할 수 없다.
     엔진을 조작하기 위해서는 시동 버튼, 가속 페달 등을 사용한다.

6.추상화(Abstraction)
 : 복잡한 세부사항을 숨기고 사용자에게 필요한 정보만을 제공한다
 ex) 자동차 운전자는 자동차의 모든 부품, 원리를 알지 않아도
      방향, 속도, 정지 등의 기본 기능만 이해하면 운전 할 수 있다.

7.객체 지향 프로그래밍의 장점(중요성)
 - 재사용성 증가
   유지 보수성 증가
   확장성 증가

8.자바(JAVA)에서의 객체 지향 프로그램
 - 코드의 모든 구조가 객체로 표현 가능하다.
   프로그램의 유연성과 모듈성 증가시킨다.







/// 객체 지향 프로그래밍 - 클래스와 객체 ///

1.클래스(Class) 정의
 : 객체를 만들기 위한 템플릿
   객체의 상태(속성)와 행동(메서드)을 정의한다.
 - 데이터와 기능의 구조를 정의하는 하나의 개념적인 틀이다
   메모리를 사용하는 실제 데이터가 아니다, 구조 정의이다
 - class 키워드를 사용하여 정의한다
   클래스 명은 UpperCamelCase를 사용한다.
 >> class 클래스명 {
      }


2.객체(Object) 정의
 : 클래스에 정의된 속성과 메서드를 가지고 있는 '실체'이다.
   클래스를 기반으로 생성한다.
 - 클래스의 '인스턴스'라고 불리며 메모리에 할당된다.
   각 객체는 독립적인 상태와 행동을 가진다.
   다른 객체와 상호작용이 가능하다.

   cf) 인스턴스화 (객체 = 인스턴스)
      : 클래스라는 템플릿을 기반으로 객체를 만드는 과정
      : 이떄 만들어진 객체를 인스턴스(Instance)라고 부른다



3.클래스 선언 방법
 >> 접근제한자 class 클래스명 {
	클래스가 가지는 속성과 행동을 정의
	- 속성(필드)은 변수 선언
	- 행동은 함수(메서드) 선언
      }


4.접근 제한자(제어자)
 - 생략 가능하다
 - 클래스의 가시성을 정의한다(접근에 대한 권한을 부여)
    public, private, protected, default
    public: 다른 패키지에서도 제한없이 접근가능
    protected: 같은 패키지(폴더)라면 제한없이 접근가능, 다른 패키지라면 상속 관계에 있는 클래스에서만 접근 가능
    default:  같은 패키지 내에서만 접근 가능 (기본값으로 생략할 때 지정된다)
    private: 해당 클래스 내부에서만 접근 가능
	
	class Car{
            //속성(필드) - 변수 선언 방식
             String title;
             String author;
             int[] pageNumber;
	}





/// 클래스의 구조 ///
: 필드, 메서드, 생성자

1.필드 : 데이터를 표현하는 속성
 >> 데이터타입 변수명;


2.메서드 : 데이터의 동작
 >> 반환타입 메서드명(매개변수){
	메서드의 동작을 정의
       }
 - 클래스 내부에서 정의된 함수로써 객체의 행동의 표현한다.
   클래스의 속성(필드)을 사용하여 특정 작업을 수행하거나 해당 값을 변경 또는 반환 가능하다.
    cf) void - 반환타입
      : 해당 메서드(함수, 행동)의 반환하는 결과가 없을 때 사용한다.
        반환(return)이 존재하는 않을 경우 메서드명 앞에 반드시 작성한다.
        return으로 받는 값이 없어서 생략되어있다.


3.생성자 : 데이터를 생성하는 역할
            클래스의 이름과 동일한 메서드이다.
 >> 생성자명() {
       }
 - 객체가 생성될 때 자동으로 호출된다.
     new 연산자 사용 시 호출되는 메서드이다.
 - 생략 시에는 기본값을 할당한다.
    (기본타입 - int : 0, boolean : false, char : ' ' / 참조타입 - null )
    사용자 정의 생성자 함수 생략 시 클래스명과 동일하면서 매개변수가 없는 메서드가 생략되어있다.
    클래스 내부의 필드를 초기화할 때 주로 사용한다.
    생성자는 반환타입을 가지지 않는다.
 - this. 키워드
    객체 자신을 참조하는데 사용한다.
    클래스의 필드와 생성자로 받아오는 데이터의 이름이 같을 경우 구분하기 위해 사용한다.

	class Car{
    	  //클래스의 속성(필드)
    	  String model;
    	  int year;
  	  //클래스의 행동(메서드)
  	  void displayInfo(){
   	     System.out.println("Model: " + model + ", Year: " + year);
   	  }
	  //클래스의 생성자
    	  Car(String modelName, int year){
    	    model = modelName;
    	    this.year = year;
    	  }
	}


4.객체 생성 (객체 인스턴스화), 생성자 호출
 : new 연산자를 사용한다.
 - 클래스의 생성자를 호출
   객체의 초기 상태를 설정
   생성된 객체의 메모리 주소를 반환하여 참조 변수에 저장한다.
   해당 객체에 대한 참조(주소)를 클래스 타입의 변수에 저장한다.
 >> 클래스명 객체명 = new 생성자명(생성자 매개변수);
	Car myCar = new Car("volvo xc60", 2024);


5.객체 사용
 :  .연산자를 사용하여 객체 내부의 필드와 메서드를 사용
  지정된 클래스를 기반으로 객체이므로 클래스 자체의 타입을 지닌다.
  1)필드 접근
   >> 객체명.필드명;
	System.out.println(myCar.model);
	System.out.println(myCar.year);
  2)메서드 호출
   >> 객체명.메서드명;
	myCar.displayInfo();



 cf)생성자 추가 예시
    필드 초기화 선언이 아닌 메서드 활용 예시
	class Counter{
	   static int count = 0;
	   Counter(){
	      count++;
	   }
	}

	public class Object06 {
	   public static void main(String[] args) {
	     Counter c1 = new Counter();
	     Counter c2 = new Counter();
	     Counter c3 = new Counter();
	     Counter c4 = new Counter();
	     Counter c5 = new Counter();
	     System.out.println(c3.count); //5

	     //생성자는 new 연선자로 호출가능하다.
	     new Counter();
	     new Counter();
	     new Counter();
	     new Counter();
	     System.out.println(Counter.count); //9
         




/// 필드와 지역변수 ///
: 객체 지향 프로그램의 '변수'

1.필드(속성)
 : 객체의 지속적인 상태를 저장하는 클래스 내부의 변수를 말한다
 - 메서드 외부에 위치한다.
 - 명시적으로 초기화하지 않으면 기본값으로 자동 초기화한다
 - 인스턴스(instance) 변수, 클래스(정적, static) 변수
    1-1)인스턴스 변수
        클래스의 각 객체(인스턴스)에 속한 변수
        클래스 내부에서 선언하고, 객체가 생성될 때 메모리에 할당된댜
        각 인스턴스마다 다른 값을 가질 수 있다.
        - 클래스를 인스턴스화하여 사용이 가능하다.
          >> 클래스명 변수명 = new 인스턴스변수명 (클래스의 인스턴스화)
          >> 객체명.인스턴스변수명 (인스턴스 변수 사용)
     1-2)클래스(정적, static) 변수
        클래스의 모든 인스턴스에서 공유되는 데이터 변수
        static 키워드를 사용하여 선언되는 변수이다
        해당 클래스로 생성되는 인스턴스는 모두 동일한 값을 가진다.
        프로그램이 시작될 때 생성되어 프로그램 종료 시 소멸된다.
        - static 변수는 인스턴스화 없이 사용 가능하다.
          각 인스턴스명으로도 호출 가능하지만 클래스명으로 호출하는것을 권장한다.
          >> 클래스명.필드명

2.지역변수
 : 메서드가 실행되는 동안에만 존재하는 일시적인 변수
 - 메서드, 생성자 또는 블록 내부에서 선언
 - 자동 초기화되지 않는다. 반드시 초기화 후 사용해야한다.

	class CarClass{
    	  //필드 - 인스턴스(instance) 변수
    	  String color;
    	  String brand;
    	  int speed;
    	  //필드 - 정적 변수
    	  static int tireNumber = 4;
    	  static int doorNumber;
    	  //지역변수
    	  void accelerate(int increment){
     	    //increment : 지역변수 -> 메서드 내부에서만 유효
    	    speed += increment;
    	  }
	}
          public class Object04 {
	public static void main(String[] args) {
        	  //클래스(정적, static) 변수 사용방법 >>클래스명.필드명
       	  System.out.println(CarClass.tireNumber); //4
      	  CarClass.doorNumber = 4;
      	  System.out.println(CarClass.doorNumber); //4

      	  //CarClass 인스턴스화
      	  CarClass car1 = new CarClass();
      	  CarClass car2 = new CarClass();
      	  //객체의 인스턴스 변수 사용방법 >> 객체명.인스턴스변수명
      	  car1.brand = "kia";
     	  car1.color = "brand";
     	  System.out.println(car2.brand);
	}
          }


3.클래스 변수와 인스턴스 변수
  1)형태
   클래스 변수: static 키워드가 데이터타입 앞에 명시한다
   인스턴스 변수: 일반 변수처럼 선언한다

  2)선언위치
   두 가지 모두 클래스 영역 내에서 선언

  3)생성 시기와 사용 시기
   클래스 변수: 클래스가 Method Area에 올라갈 떄 생성, 객체 생성 이전에도 사용 가능
   인스턴스 변수: 인스턴스가 생성되었을 때 생성, 객체 생성 이후에만 사용 가능

  4)호출 방법
   클래스 변수 >> 클래스명.변수명
   인스턴스 변수 >> 객체명.변수명

	class Example{
	   //인스턴스 변수
	   int instanceValue;
	   //클래스 변수
 	   static int classValue;
	}









