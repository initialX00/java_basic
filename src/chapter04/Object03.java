package chapter04;

    /*
        클래스의 구조
        : 필드, 메서드, 생성자
        1.필드 : 데이터를 표현하는 속성
            >> 데이터타입 변수명;
        2.메서드 : 데이터의 동작
            >> 반환타입 메서드명(매개변수){
                    메서드의 동작을 정의
                }
            - 클래스 내부에서 정의된 함수로써 객체의 행동의 표현한다.
              클래스의 속성(필드)을 사용하여 특정 작업을 수행하거나 해당 값을 변경 또는 반환 가능하다.
                  cf) void - 반환타입
                      : 해당 메서드(함수, 행동)의 반환하는 결과가 없을 때 사용한다.
                        반환(return)이 존재하는 않을 경우 메서드명 앞에 반드시 작성한다.
                        return으로 받는 값이 없어서 생략되어있다.
        3.생성자 : 데이터를 생성하는 역할
                 클래스의 이름과 동일한 메서드이다.
             >> 생성자명() {
                }
              - 객체가 생성될 때 자동으로 호출된다.
                new 연산자 사용 시 호출된다.
              - 생략 시에는 기본값을 할당한다.
                (기본타입 - int : 0, boolean : false, char : '' / 참조타입 - null )
                사용자 정의 생성자 함수 생략 시 클래스명과 동일하면서 매개변수가 없는 메서드가 생략되어있다.
                클래스 내부의 필드를 초기화할 때 주로 사용한다.
                생성자는 반환타입을 가지지 않는다.
              - this. 키워드
                객체 자신을 참조하는데 사용한다.
                클래스의 필드와 생성자로 받아오는 데이터의 이름이 같을 경우 구분하기 위해 사용한다.
     */

class Car{
    //클래스의 속성(필드)
    String model;
    int year;
    //클래스의 행동(메서드)
    void displayInfo(){
        System.out.println("Model: " + model + ", Year: " + year);
    }
    //클래스의 생성자
    Car(String modelName, int year){
        //생성자 사용 시 modelName: xc60, year: 2024
        model = modelName;
        this.year = year;
        //this. 키워드
        //클래스 그 자체의 객체를 가리킨다, 객체 자신을 참조하는데 사용한다.
        //클래스의 필드와 생성자로 받아오는 데이터의 이름이 같을 경우 구분하기 위해 사용한다.
    }
}

public class Object03 {
    public static void main(String[] args) {
        /*
            1.객체 생성 (객체 인스턴스화)
            : new 연산자를 사용한다
              - 클래스의 생성자를 호출
                객체의 초기 상태를 설정
                생성된 객체의 메모리 주소를 반환하여 참조 변수에 저장한다.
                해당 객체에 대한 참조(주소)를 클래스 타입의 변수에 저장한다.
            >> 클래스명 객체명 = new 클래스명(생성자 매개변수);

            2.객체 사용
            : .연산자를 사용하여 객체 내부의 필드와 메서드를 사용
             지정된 클래스를 기반으로 객체이므로 클래스 자체의 타입을 지닌다.
             1)필드 접근
             >> 객체명.필드명;
             2)메서드 호출
             >> 객체명.메서드명;
         */

        //생성자 호출 : 생성자명(필요한 매개변수);
        //해당 객체에 대한 참조(주소)를 클래스 타입의 변수에 저장한다
         Car myCar = new Car("volvo xc60", 2024);

         /*
            객체 사용
            : .연산자를 사용하여 객체 내부의 필드와 메서드를 사용
         */
        //1.필드 접근
        System.out.println(myCar.model);
        System.out.println(myCar.year);
        //2.메서드 호출
        myCar.displayInfo();

        //객체 생성 구문
        //클래스명 객체명 = new 클래스명(생성자 매개변수);

        //클래스 타입
        //지정된 클래스를 기반으로 객체이므로 클래스 자체의 타입을 지닌다.





    }
}
